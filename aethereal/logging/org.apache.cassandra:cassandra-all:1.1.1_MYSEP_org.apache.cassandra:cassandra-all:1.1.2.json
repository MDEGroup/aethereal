[
  {
    "coordinatesV1": "org.apache.cassandra:cassandra-all:1.1.1",
    "coordinatesV2": "org.apache.cassandra:cassandra-all:1.1.2",
    "caller": "|java+method:///org/apache/cassandra/hadoop/BulkRecordWriter/prepareWriter()|",
    "called": "|java+method:///org/apache/hadoop/conf/Configuration/get(java.lang.String,java.lang.String)|",
    "v1Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputKeyspacePassword(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputCompressionParamaters(org.apache.hadoop.conf.Configuration)|",
      "|java+constructor:///org/apache/cassandra/hadoop/BulkRecordWriter$NullOutputHandler/BulkRecordWriter$NullOutputHandler()|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputInitialAddress(org.apache.hadoop.conf.Configuration)|",
      "|java+constructor:///org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter/SSTableSimpleUnsortedWriter(java.io.File,org.apache.cassandra.dht.IPartitioner,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,int,org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputKeyspaceUserName(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputRpcPort(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputKeyspace(org.apache.hadoop.conf.Configuration)|",
      "|java+constructor:///org/apache/cassandra/hadoop/BulkRecordWriter$ExternalClient/BulkRecordWriter$ExternalClient(java.lang.String,int,java.lang.String,java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/io/sstable/SSTableLoader/SSTableLoader(java.io.File,org.apache.cassandra.io.sstable.SSTableLoader$Client,org.apache.cassandra.io.sstable.SSTableLoader$OutputHandler)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputPartitioner(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///java/lang/Integer/valueOf(java.lang.String)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputColumnFamily(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/hadoop/conf/Configuration/get(java.lang.String,java.lang.String)|"
    ],
    "v2Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputKeyspacePassword(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputCompressionParamaters(org.apache.hadoop.conf.Configuration)|",
      "|java+constructor:///org/apache/cassandra/hadoop/BulkRecordWriter$NullOutputHandler/BulkRecordWriter$NullOutputHandler()|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputPartitioner(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputInitialAddress(org.apache.hadoop.conf.Configuration)|",
      "|java+constructor:///org/apache/cassandra/io/sstable/SSTableSimpleUnsortedWriter/SSTableSimpleUnsortedWriter(java.io.File,org.apache.cassandra.dht.IPartitioner,java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,int,org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+constructor:///org/apache/cassandra/io/sstable/SSTableLoader/SSTableLoader(java.io.File,org.apache.cassandra.io.sstable.SSTableLoader$Client,org.apache.cassandra.utils.OutputHandler)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputKeyspaceUserName(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputRpcPort(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputKeyspace(org.apache.hadoop.conf.Configuration)|",
      "|java+constructor:///org/apache/cassandra/hadoop/BulkRecordWriter$ExternalClient/BulkRecordWriter$ExternalClient(java.lang.String,int,java.lang.String,java.lang.String)|",
      "|java+method:///java/lang/Integer/valueOf(java.lang.String)|",
      "|java+method:///org/apache/cassandra/hadoop/ConfigHelper/getOutputColumnFamily(org.apache.hadoop.conf.Configuration)|",
      "|java+method:///org/apache/hadoop/conf/Configuration/get(java.lang.String,java.lang.String)|"
    ],
    "affectedLib": "org.apache.hadoop:hadoop-core:0.20.203.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "org.apache.cassandra:cassandra-all:1.1.1",
    "coordinatesV2": "org.apache.cassandra:cassandra-all:1.1.2",
    "caller": "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/execute(org.apache.cassandra.db.compaction.CompactionManager$CompactionExecutorStatsCollector)|",
    "called": "|java+method:///org/apache/commons/lang/StringUtils/join(java.util.Collection,java.lang.String)|",
    "v1Body": [
      "|java+method:///org/apache/cassandra/db/Directories/getDirectoryForNewSSTables(long)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionStrategy/getScanners(java.util.Collection)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionManager$CompactionExecutorStatsCollector/beginCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/addToTotalBytesCompacted(long)|",
      "|java+method:///java/lang/Math/max(long,long)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///java/util/Map/entrySet()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactedRow/isEmpty()|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionManager$CompactionExecutorStatsCollector/finishCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/isMultithreadedCompaction()|",
      "|java+method:///java/util/Map/put(java.lang.Object,java.lang.Object)|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+method:///java/lang/Math/ceil(double)|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/isSnapshotBeforeCompaction()|",
      "|java+constructor:///org/apache/cassandra/db/compaction/CompactionController/CompactionController(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,int,boolean)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/cacheKey(org.apache.cassandra.db.DecoratedKey,java.lang.Long)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableWriter/closeAndOpenReader(long)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionIterable/getCompactionInfo()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTable/getTotalBytes(java.lang.Iterable)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/replaceCompactedSSTables(java.util.Collection,java.lang.Iterable,org.apache.cassandra.db.compaction.OperationType)|",
      "|java+method:///com/google/common/base/Predicates/notNull()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/newSSTableSegmentThresholdReached(org.apache.cassandra.io.sstable.SSTableWriter,long)|",
      "|java+method:///java/lang/Double/valueOf(double)|",
      "|java+method:///java/lang/Long/valueOf(long)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableWriter/append(org.apache.cassandra.db.compaction.AbstractCompactedRow)|",
      "|java+method:///java/util/Set/size()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/util/Map$Entry/getKey()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/createCompactionWriter(long,java.io.File,java.util.Collection)|",
      "|java+method:///org/apache/cassandra/utils/CloseableIterator/close()|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionIterable/iterator()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/getExpectedCompactedFileSize(java.lang.Iterable,org.apache.cassandra.db.compaction.OperationType)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/getApproximateKeyCount(java.lang.Iterable)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/isCompactionInteresting(java.util.Set)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/getCompactionStrategy()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/getFilename()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+constructor:///java/util/HashMap/HashMap()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableWriter/abort()|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/getPreheatKeyCache()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/snapshotWithoutFlush(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(long)|",
      "|java+method:///java/lang/String/equals(java.lang.Object)|",
      "|java+constructor:///org/apache/cassandra/db/compaction/CompactionIterable/CompactionIterable(org.apache.cassandra.db.compaction.OperationType,java.util.List,org.apache.cassandra.db.compaction.CompactionController)|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/getIndexInterval()|",
      "|java+constructor:///org/apache/cassandra/db/compaction/ParallelCompactionIterable/ParallelCompactionIterable(org.apache.cassandra.db.compaction.OperationType,java.util.List,org.apache.cassandra.db.compaction.CompactionController)|",
      "|java+constructor:///org/apache/cassandra/db/compaction/CompactionInterruptedException/CompactionInterruptedException(org.apache.cassandra.db.compaction.CompactionInfo)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/getMaxDataAge(java.util.Collection)|",
      "|java+method:///com/google/common/collect/Iterators/filter(java.util.Iterator,com.google.common.base.Predicate)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/markCompacted(java.util.Collection,org.apache.cassandra.db.compaction.OperationType)|",
      "|java+method:///java/util/Collection/add(java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/partialCompactionsAcceptable()|",
      "|java+method:///java/util/Set/remove(java.lang.Object)|",
      "|java+method:///java/util/Map$Entry/getValue()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/getCachedPosition(org.apache.cassandra.db.DecoratedKey,boolean)|",
      "|java+method:///java/lang/System/currentTimeMillis()|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object)|",
      "|java+method:///java/util/Collection/iterator()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/getMaxSizeFile(java.lang.Iterable)|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.util.Collection,java.lang.String)|",
      "|java+method:///org/slf4j/Logger/isDebugEnabled()|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|",
      "|java+constructor:///java/util/HashSet/HashSet(java.util.Collection)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionStrategy/getMaxSSTableSize()|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionIterable/isStopRequested()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/apache/cassandra/utils/FBUtilities/unchecked(java.lang.Exception)|"
    ],
    "v2Body": [
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///org/apache/cassandra/db/Directories/getDirectoryForNewSSTables(long)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionStrategy/getScanners(java.util.Collection)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionManager$CompactionExecutorStatsCollector/beginCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/addToTotalBytesCompacted(long)|",
      "|java+method:///java/lang/Math/max(long,long)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///java/util/Map/entrySet()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactedRow/isEmpty()|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionManager$CompactionExecutorStatsCollector/finishCompaction(org.apache.cassandra.db.compaction.CompactionInfo$Holder)|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/isMultithreadedCompaction()|",
      "|java+method:///java/util/Map/put(java.lang.Object,java.lang.Object)|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+method:///java/lang/Math/ceil(double)|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/isSnapshotBeforeCompaction()|",
      "|java+constructor:///org/apache/cassandra/db/compaction/CompactionController/CompactionController(org.apache.cassandra.db.ColumnFamilyStore,java.util.Collection,int,boolean)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/cacheKey(org.apache.cassandra.db.DecoratedKey,java.lang.Long)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableWriter/closeAndOpenReader(long)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionIterable/getCompactionInfo()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTable/getTotalBytes(java.lang.Iterable)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/replaceCompactedSSTables(java.util.Collection,java.lang.Iterable,org.apache.cassandra.db.compaction.OperationType)|",
      "|java+method:///com/google/common/base/Predicates/notNull()|",
      "|java+method:///java/lang/Double/valueOf(double)|",
      "|java+method:///java/lang/Long/valueOf(long)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableWriter/append(org.apache.cassandra.db.compaction.AbstractCompactedRow)|",
      "|java+method:///java/util/Set/size()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/util/Map$Entry/getKey()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/createCompactionWriter(long,java.io.File,java.util.Collection)|",
      "|java+method:///org/apache/cassandra/utils/CloseableIterator/close()|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionIterable/iterator()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/getExpectedCompactedFileSize(java.lang.Iterable,org.apache.cassandra.db.compaction.OperationType)|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/getApproximateKeyCount(java.lang.Iterable)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/isCompactionInteresting(java.util.Set)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/getCompactionStrategy()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/getFilename()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+constructor:///java/util/HashMap/HashMap()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableWriter/abort()|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/getPreheatKeyCache()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/snapshotWithoutFlush(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(long)|",
      "|java+method:///java/lang/String/equals(java.lang.Object)|",
      "|java+constructor:///org/apache/cassandra/db/compaction/CompactionIterable/CompactionIterable(org.apache.cassandra.db.compaction.OperationType,java.util.List,org.apache.cassandra.db.compaction.CompactionController)|",
      "|java+method:///org/apache/cassandra/config/DatabaseDescriptor/getIndexInterval()|",
      "|java+constructor:///org/apache/cassandra/db/compaction/ParallelCompactionIterable/ParallelCompactionIterable(org.apache.cassandra.db.compaction.OperationType,java.util.List,org.apache.cassandra.db.compaction.CompactionController)|",
      "|java+constructor:///org/apache/cassandra/db/compaction/CompactionInterruptedException/CompactionInterruptedException(org.apache.cassandra.db.compaction.CompactionInfo)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/getMaxDataAge(java.util.Collection)|",
      "|java+method:///com/google/common/collect/Iterators/filter(java.util.Iterator,com.google.common.base.Predicate)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/markCompacted(java.util.Collection,org.apache.cassandra.db.compaction.OperationType)|",
      "|java+method:///java/util/Collection/add(java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/partialCompactionsAcceptable()|",
      "|java+method:///java/util/Set/remove(java.lang.Object)|",
      "|java+method:///org/apache/cassandra/db/compaction/CompactionTask/newSSTableSegmentThresholdReached(org.apache.cassandra.io.sstable.SSTableWriter)|",
      "|java+method:///java/util/Map$Entry/getValue()|",
      "|java+method:///org/apache/cassandra/io/sstable/SSTableReader/getCachedPosition(org.apache.cassandra.db.DecoratedKey,boolean)|",
      "|java+method:///java/lang/System/currentTimeMillis()|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object)|",
      "|java+method:///java/util/Collection/iterator()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyStore/getMaxSizeFile(java.lang.Iterable)|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.util.Collection,java.lang.String)|",
      "|java+method:///org/slf4j/Logger/isDebugEnabled()|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|",
      "|java+constructor:///java/util/HashSet/HashSet(java.util.Collection)|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionStrategy/getMaxSSTableSize()|",
      "|java+method:///org/apache/cassandra/db/compaction/AbstractCompactionIterable/isStopRequested()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/apache/cassandra/utils/FBUtilities/unchecked(java.lang.Exception)|"
    ],
    "affectedLib": "commons-lang:commons-lang:2.4",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "org.apache.cassandra:cassandra-all:1.1.1",
    "coordinatesV2": "org.apache.cassandra:cassandra-all:1.1.2",
    "caller": "|java+method:///org/apache/cassandra/config/KSMetaData/toString()|",
    "called": "|java+method:///org/apache/commons/lang/StringUtils/join(java.util.Collection,java.lang.String)|",
    "v1Body": [
      "|java+method:///java/lang/Class/getSimpleName()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///java/lang/StringBuilder/append(boolean)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.util.Collection,java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/toString()|"
    ],
    "v2Body": [
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///java/lang/StringBuilder/append(boolean)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.util.Collection,java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/Object/toString()|",
      "|java+method:///java/lang/Class/getSimpleName()|"
    ],
    "affectedLib": "commons-lang:commons-lang:2.4",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "org.apache.cassandra:cassandra-all:1.1.1",
    "coordinatesV2": "org.apache.cassandra:cassandra-all:1.1.2",
    "caller": "|java+method:///org/apache/cassandra/config/CFMetaData/fromThrift(org.apache.cassandra.thrift.CfDef)|",
    "called": "|java+method:///org/apache/cassandra/thrift/CfDef/isSetId()|",
    "v1Body": [
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetKey_validation_class()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/bloomFilterFpChance(java.lang.Double)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetGc_grace_seconds()|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetId()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compressionParameters(org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/io/compress/CompressionParameters/create(java.util.Map)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetCompaction_strategy()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData$Caching/fromString(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetCaching()|",
      "|java+method:///java/lang/Double/valueOf(double)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/comment(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///java/util/HashMap/HashMap(java.util.Map)|",
      "|java+method:///org/apache/cassandra/config/Schema/nextCFId()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/applyImplicitDefaults(org.apache.cassandra.thrift.CfDef)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/gcGraceSeconds(int)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetRead_repair_chance()|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetMin_compaction_threshold()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/maxCompactionThreshold(int)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetBloom_filter_fp_chance()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/caching(org.apache.cassandra.config.CFMetaData$Caching)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/readRepairChance(double)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetCompaction_strategy_options()|",
      "|java+method:///org/apache/cassandra/db/marshal/TypeParser/parse(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/ColumnDefinition/fromThrift(java.util.List)|",
      "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,int)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compactionStrategyOptions(java.util.Map)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetKey_alias()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/createCompactionStrategy(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/defaultValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyType/create(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/minCompactionThreshold(int)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetMax_compaction_threshold()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/keyValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/columnMetadata(java.util.Map)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetDclocal_read_repair_chance()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/keyAlias(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/replicateOnWrite(boolean)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/dcLocalReadRepairChance(double)|"
    ],
    "v2Body": [
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetKey_validation_class()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/bloomFilterFpChance(java.lang.Double)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetGc_grace_seconds()|",
      "|java+method:///org/apache/cassandra/db/marshal/MarshalException/getMessage()|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetId()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compressionParameters(org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/io/compress/CompressionParameters/create(java.util.Map)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetCompaction_strategy()|",
      "|java+constructor:///org/apache/cassandra/config/ConfigurationException/ConfigurationException(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData$Caching/fromString(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetCaching()|",
      "|java+method:///java/lang/Double/valueOf(double)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/comment(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///java/util/HashMap/HashMap(java.util.Map)|",
      "|java+method:///org/apache/cassandra/config/Schema/nextCFId()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/applyImplicitDefaults(org.apache.cassandra.thrift.CfDef)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/gcGraceSeconds(int)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetRead_repair_chance()|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetMin_compaction_threshold()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/maxCompactionThreshold(int)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetBloom_filter_fp_chance()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/caching(org.apache.cassandra.config.CFMetaData$Caching)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/readRepairChance(double)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetCompaction_strategy_options()|",
      "|java+method:///org/apache/cassandra/db/marshal/TypeParser/parse(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/ColumnDefinition/fromThrift(java.util.List)|",
      "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType,int)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compactionStrategyOptions(java.util.Map)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetKey_alias()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/createCompactionStrategy(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/defaultValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/db/ColumnFamilyType/create(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/minCompactionThreshold(int)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetMax_compaction_threshold()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/keyValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/columnMetadata(java.util.Map)|",
      "|java+method:///org/apache/cassandra/thrift/CfDef/isSetDclocal_read_repair_chance()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/keyAlias(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/replicateOnWrite(boolean)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/dcLocalReadRepairChance(double)|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-thrift:1.1.2",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.cassandra:cassandra-all:1.1.1",
    "coordinatesV2": "org.apache.cassandra:cassandra-all:1.1.2",
    "caller": "|java+method:///org/apache/cassandra/cql3/statements/DeleteStatement/mutationForKey(org.apache.cassandra.cql3.CFDefinition,org.apache.cassandra.service.ClientState,java.nio.ByteBuffer,org.apache.cassandra.cql3.ColumnNameBuilder,java.util.List)|",
    "called": "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
    "v1Body": [
      "|java+constructor:///org/apache/cassandra/db/filter/QueryPath/QueryPath(java.lang.String,java.nio.ByteBuffer,java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/copy()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///org/apache/cassandra/cql3/statements/DeleteStatement/columnFamily()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/componentCount()|",
      "|java+constructor:///org/apache/cassandra/db/RowMutation/RowMutation(java.lang.String,java.nio.ByteBuffer)|",
      "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/db/filter/QueryPath/QueryPath(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/RowMutation/delete(org.apache.cassandra.db.filter.QueryPath,long)|",
      "|java+method:///org/apache/cassandra/cql3/statements/DeleteStatement/getTimestamp(org.apache.cassandra.service.ClientState)|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/add(java.nio.ByteBuffer)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/build()|",
      "|java+method:///org/apache/cassandra/cql3/CFDefinition/get(org.apache.cassandra.cql3.ColumnIdentifier)|",
      "|java+method:///org/apache/cassandra/cql3/QueryProcessor/validateKey(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/cql3/QueryProcessor/validateColumnName(java.nio.ByteBuffer)|"
    ],
    "v2Body": [
      "|java+constructor:///org/apache/cassandra/db/filter/QueryPath/QueryPath(java.lang.String,java.nio.ByteBuffer,java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/copy()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///org/apache/cassandra/cql3/statements/DeleteStatement/columnFamily()|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/componentCount()|",
      "|java+constructor:///org/apache/cassandra/db/RowMutation/RowMutation(java.lang.String,java.nio.ByteBuffer)|",
      "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/db/filter/QueryPath/QueryPath(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/RowMutation/delete(org.apache.cassandra.db.filter.QueryPath,long)|",
      "|java+method:///org/apache/cassandra/cql3/statements/DeleteStatement/getTimestamp(org.apache.cassandra.service.ClientState)|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/add(java.nio.ByteBuffer)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///java/util/Map/keySet()|",
      "|java+method:///org/apache/cassandra/cql3/ColumnNameBuilder/build()|",
      "|java+method:///org/apache/cassandra/cql3/CFDefinition/get(org.apache.cassandra.cql3.ColumnIdentifier)|",
      "|java+method:///org/apache/cassandra/cql3/QueryProcessor/validateKey(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/cql3/QueryProcessor/validateColumnName(java.nio.ByteBuffer)|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-thrift:1.1.2",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.cassandra:cassandra-all:1.1.1",
    "coordinatesV2": "org.apache.cassandra:cassandra-all:1.1.2",
    "caller": "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement/announceMigration()|",
    "called": "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
    "v1Body": [
      "|java+method:///org/apache/cassandra/config/ColumnDefinition/setValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///java/nio/ByteBuffer/equals(java.lang.Object)|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement/keyspace()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/getColumn_metadata()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/getColumnDefinition(java.nio.ByteBuffer)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement$Type/ordinal()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/defaultValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///java/util/Collection/iterator()|",
      "|java+method:///org/apache/cassandra/cql3/CFPropDefs/parseType(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
      "|java+method:///org/apache/cassandra/thrift/ThriftValidation/validateColumnFamily(java.lang.String,java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/clone()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///org/apache/cassandra/cql3/CFPropDefs/validate()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/getCfDef()|",
      "|java+method:///org/apache/cassandra/cql3/CFPropDefs/applyToCFMetadata(org.apache.cassandra.config.CFMetaData)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///org/apache/cassandra/cql3/CFDefinition/get(org.apache.cassandra.cql3.ColumnIdentifier)|",
      "|java+constructor:///org/apache/cassandra/config/ColumnDefinition/ColumnDefinition(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.thrift.IndexType,java.util.Map,java.lang.String,java.lang.Integer)|",
      "|java+method:///org/apache/cassandra/cql3/CFDefinition$Name$Kind/ordinal()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/keyValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement/columnFamily()|",
      "|java+method:///org/apache/cassandra/service/MigrationManager/announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/removeColumnDefinition(org.apache.cassandra.config.ColumnDefinition)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/addColumnDefinition(org.apache.cassandra.config.ColumnDefinition)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/cassandra/config/ColumnDefinition/setValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///java/nio/ByteBuffer/equals(java.lang.Object)|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement/keyspace()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/getColumn_metadata()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/getColumnDefinition(java.nio.ByteBuffer)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement$Type/ordinal()|",
      "|java+method:///org/apache/cassandra/db/marshal/CompositeType/getInstance(java.util.List)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/defaultValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/cql3/CFPropDefs/parseType(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/thrift/InvalidRequestException/InvalidRequestException(java.lang.String)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+method:///org/apache/cassandra/thrift/ThriftValidation/validateColumnFamily(java.lang.String,java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/clone()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///org/apache/cassandra/cql3/CFPropDefs/validate()|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/getCfDef()|",
      "|java+method:///org/apache/cassandra/cql3/CFPropDefs/applyToCFMetadata(org.apache.cassandra.config.CFMetaData)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///org/apache/cassandra/cql3/CFDefinition/get(org.apache.cassandra.cql3.ColumnIdentifier)|",
      "|java+constructor:///org/apache/cassandra/config/ColumnDefinition/ColumnDefinition(java.nio.ByteBuffer,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.thrift.IndexType,java.util.Map,java.lang.String,java.lang.Integer)|",
      "|java+method:///org/apache/cassandra/cql3/CFDefinition$Name$Kind/ordinal()|",
      "|java+method:///java/util/Collection/iterator()|",
      "|java+method:///java/util/List/set(int,java.lang.Object)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/keyValidator(org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+method:///org/apache/cassandra/cql3/statements/AlterTableStatement/columnFamily()|",
      "|java+method:///org/apache/cassandra/service/MigrationManager/announceColumnFamilyUpdate(org.apache.cassandra.config.CFMetaData)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/removeColumnDefinition(org.apache.cassandra.config.ColumnDefinition)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/addColumnDefinition(org.apache.cassandra.config.ColumnDefinition)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-thrift:1.1.2",
    "change": "UPDATED"
  }
]