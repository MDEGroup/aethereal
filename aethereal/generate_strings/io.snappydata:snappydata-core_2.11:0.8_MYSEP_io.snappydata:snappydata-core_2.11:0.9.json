[
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/org$apache$spark$sql$execution$row$RowFormatRelation$$indexedColumns()|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/ddl/catalog/GfxdSystemProcedures/getIndexColumns(java.lang.String%5B%5D,com.gemstone.gemfire.internal.cache.LocalRegion)|",
    "v1Body": [
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+constructor:///scala/collection/mutable/HashSet/HashSet()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/ReferencedKeyConstraintDescriptor/getKeyColumns()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/access/index/GfxdIndexManager/getIndexConglomerateDescriptors()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/TableDescriptor/getPrimaryKey()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/TableDescriptor/getColumnNamesArray()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/region()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/ConglomerateDescriptor/getIndexDescriptor()|",
      "|java+method:///scala/collection/mutable/HashSet/$plus$eq(java.lang.Object)|",
      "|java+method:///scala/Predef$/intArrayOps(int%5B%5D)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/LocalRegion/getUserAttribute()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getIndexManager()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/IndexRowGenerator/baseColumnPositions()|",
      "|java+method:///scala/collection/mutable/ArrayOps/nonEmpty()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getTableDescriptor()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/clusterMode()|",
      "|java+method:///scala/Option/foreach(scala.Function1)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/region()|",
      "|java+constructor:///scala/collection/mutable/HashSet/HashSet()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/relInfo()|",
      "|java+constructor:///org/apache/spark/sql/execution/row/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$indexedColumns$1/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$indexedColumns$1(org.apache.spark.sql.execution.row.RowFormatRelation,scala.collection.mutable.HashSet)|",
      "|java+method:///scala/Option$/apply(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/hive/RelationInfo/indexCols()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/ddl/catalog/GfxdSystemProcedures/getIndexColumns(java.lang.String%5B%5D,com.gemstone.gemfire.internal.cache.LocalRegion)|",
      "|java+method:///scala/collection/mutable/HashSet/$plus$plus$eq(scala.collection.TraversableOnce)|",
      "|java+method:///scala/Predef$/refArrayOps(java.lang.Object%5B%5D)|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns(org.apache.spark.sql.sources.Filter%5B%5D)|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/ddl/catalog/GfxdSystemProcedures/getPKColumns(java.lang.String%5B%5D,com.gemstone.gemfire.internal.cache.LocalRegion)|",
    "v1Body": [
      "|java+constructor:///org/apache/spark/sql/execution/row/RowFormatRelation$$anonfun$1/RowFormatRelation$$anonfun$1(org.apache.spark.sql.execution.row.RowFormatRelation,java.lang.String%5B%5D)|",
      "|java+method:///scala/Array$/canBuildFrom(scala.reflect.ClassTag)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/LocalRegion/getUserAttribute()|",
      "|java+method:///scala/Array$/empty(scala.reflect.ClassTag)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/ReferencedKeyConstraintDescriptor/getKeyColumns()|",
      "|java+method:///scala/collection/mutable/ArrayOps/forall(scala.Function1)|",
      "|java+method:///scala/reflect/ClassTag$/apply(java.lang.Class)|",
      "|java+constructor:///org/apache/spark/sql/execution/row/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns$1/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns$1(org.apache.spark.sql.execution.row.RowFormatRelation,scala.collection.mutable.ArrayBuffer)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/TableDescriptor/getColumnNamesArray()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/region()|",
      "|java+method:///scala/Predef$/intArrayOps(int%5B%5D)|",
      "|java+method:///scala/collection/mutable/ArrayOps/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///scala/Predef$/refArrayOps(java.lang.Object%5B%5D)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/dictionary/TableDescriptor/getPrimaryKey()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/org$apache$spark$sql$execution$row$RowFormatRelation$$getEqualToColumns$1(org.apache.spark.sql.sources.Filter%5B%5D)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getTableDescriptor()|"
    ],
    "v2Body": [
      "|java+method:///java/lang/String/split(java.lang.String)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/region()|",
      "|java+method:///scala/Array$/empty(scala.reflect.ClassTag)|",
      "|java+method:///org/apache/spark/sql/hive/RelationInfo/pkCols()|",
      "|java+method:///scala/Predef$/refArrayOps(java.lang.Object%5B%5D)|",
      "|java+method:///scala/collection/mutable/ArrayOps/forall(scala.Function1)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/org$apache$spark$sql$execution$row$RowFormatRelation$$getEqualToColumns$1(org.apache.spark.sql.sources.Filter%5B%5D)|",
      "|java+method:///scala/reflect/ClassTag$/apply(java.lang.Class)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/clusterMode()|",
      "|java+constructor:///org/apache/spark/sql/execution/row/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns$2/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns$2(org.apache.spark.sql.execution.row.RowFormatRelation,scala.collection.mutable.ArrayBuffer)|",
      "|java+constructor:///org/apache/spark/sql/execution/row/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns$1/RowFormatRelation$$anonfun$org$apache$spark$sql$execution$row$RowFormatRelation$$pushdownPKColumns$1(org.apache.spark.sql.execution.row.RowFormatRelation,scala.collection.mutable.ArrayBuffer)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/ddl/catalog/GfxdSystemProcedures/getPKColumns(java.lang.String%5B%5D,com.gemstone.gemfire.internal.cache.LocalRegion)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatRelation/relInfo()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/getPartitions()|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
    "v1Body": [
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/connProps()|",
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/dialect()|",
      "|java+method:///org/apache/spark/sql/SnappySession/sessionState()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ExternalStoreUtils$/lookupName(java.lang.String,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/connProperties()|",
      "|java+method:///java/sql/Connection/getSchema()|",
      "|java+method:///java/sql/Connection/close()|",
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/poolProps()|",
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/hikariCP()|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/getTablePartitions(com.gemstone.gemfire.internal.cache.CacheDistributionAdvisee)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/session()|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/getTablePartitions(com.gemstone.gemfire.internal.cache.PartitionedRegion)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/tableName()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/parts()|",
      "|java+method:///org/apache/spark/sql/execution/ConnectionPool$/getPoolConnection(java.lang.String,org.apache.spark.sql.jdbc.JdbcDialect,scala.collection.immutable.Map,java.util.Properties,boolean)|"
    ],
    "v2Body": [
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/connProps()|",
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/dialect()|",
      "|java+method:///org/apache/spark/sql/execution/ConnectionPool$/getPoolConnection(java.lang.String,org.apache.spark.sql.jdbc.JdbcDialect,scala.collection.immutable.Map,java.util.Properties,boolean)|",
      "|java+method:///scala/Function0/apply()|",
      "|java+method:///org/apache/spark/sql/SnappySession/sessionState()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ExternalStoreUtils$/lookupName(java.lang.String,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/connProperties()|",
      "|java+method:///java/sql/Connection/getSchema()|",
      "|java+method:///java/sql/Connection/close()|",
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/poolProps()|",
      "|java+method:///org/apache/spark/sql/sources/ConnectionProperties/hikariCP()|",
      "|java+method:///java/sql/Connection/commit()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/session()|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/getTablePartitions(com.gemstone.gemfire.internal.cache.PartitionedRegion)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/tableName()|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/getTablePartitions(com.gemstone.gemfire.internal.cache.CacheDistributionAdvisee)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/partitionEvaluator()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/compute(org.apache.spark.Partition,org.apache.spark.TaskContext)|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/distributed/utils/GemFireXDUtils/getGemFireContainer(java.lang.String,boolean)|",
    "v1Body": [
      "|java+method:///scala/Tuple3/_1()|",
      "|java+method:///scala/Tuple3/_2()|",
      "|java+method:///scala/Tuple3/_3()|",
      "|java+constructor:///org/apache/spark/sql/execution/row/ResultSetTraversal/ResultSetTraversal(java.sql.Connection,java.sql.Statement,java.sql.ResultSet,org.apache.spark.TaskContext)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/useResultSet()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/distributed/utils/GemFireXDUtils/getGemFireContainer(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/computeResultSet(org.apache.spark.Partition)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/filterWhereClause()|",
      "|java+method:///java/lang/reflect/Field/get(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/isPartitioned()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/resultSetField()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/pushProjections()|",
      "|java+method:///org/apache/spark/sql/collection/MultiBucketExecutorPartition/buckets()|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToInteger(int)|",
      "|java+method:///java/lang/String/isEmpty()|",
      "|java+constructor:///scala/MatchError/MatchError(java.lang.Object)|",
      "|java+constructor:///scala/Tuple3/Tuple3(java.lang.Object,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/CompactExecRowIteratorOnScan(com.pivotal.gemfirexd.internal.engine.store.GemFireContainer,java.util.Set)|",
      "|java+method:///java/util/Collections/singleton(java.lang.Object)|",
      "|java+constructor:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnRS/CompactExecRowIteratorOnRS(java.sql.Connection,java.sql.Statement,com.pivotal.gemfirexd.internal.impl.jdbc.EmbedResultSet,org.apache.spark.TaskContext)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/tableName()|",
      "|java+method:///org/apache/spark/Partition/index()|"
    ],
    "v2Body": [
      "|java+method:///com/gemstone/gemfire/internal/cache/TXManagerImpl/getTXState()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/TXManagerImpl/begin(com.gemstone.gemfire.cache.IsolationLevel,java.util.EnumSet)|",
      "|java+constructor:///org/apache/spark/sql/execution/row/ResultSetTraversal/ResultSetTraversal(java.sql.Connection,java.sql.Statement,java.sql.ResultSet,org.apache.spark.TaskContext)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/TXManagerImpl/getTransactionId()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/distributed/utils/GemFireXDUtils/getGemFireContainer(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/computeResultSet(org.apache.spark.Partition)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/filterWhereClause()|",
      "|java+method:///java/lang/reflect/Field/get(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/isPartitioned()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/resultSetField()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/commitTxBeforeTaskCompletion(scala.Option,org.apache.spark.TaskContext)|",
      "|java+method:///scala/Tuple3/_1()|",
      "|java+constructor:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/CompactExecRowIteratorOnScan(com.pivotal.gemfirexd.internal.engine.store.GemFireContainer,java.util.Set,com.gemstone.gemfire.internal.cache.TXId)|",
      "|java+method:///scala/Tuple3/_2()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/commitTx()|",
      "|java+method:///scala/Tuple3/_3()|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/useResultSet()|",
      "|java+method:///scala/Option$/apply(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/pushProjections()|",
      "|java+method:///org/apache/spark/sql/collection/MultiBucketExecutorPartition/buckets()|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToInteger(int)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/GemFireCacheImpl/getExisting()|",
      "|java+method:///java/lang/String/isEmpty()|",
      "|java+constructor:///scala/MatchError/MatchError(java.lang.Object)|",
      "|java+constructor:///scala/Tuple3/Tuple3(java.lang.Object,java.lang.Object,java.lang.Object)|",
      "|java+method:///java/util/Collections/singleton(java.lang.Object)|",
      "|java+constructor:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnRS/CompactExecRowIteratorOnRS(java.sql.Connection,java.sql.Statement,com.pivotal.gemfirexd.internal.impl.jdbc.EmbedResultSet,org.apache.spark.TaskContext)|",
      "|java+method:///org/apache/spark/sql/execution/row/RowFormatScanRDD/tableName()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/GemFireCacheImpl/getCacheTransactionManager()|",
      "|java+method:///org/apache/spark/Partition/index()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/moveNext()|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/store/RegionEntryUtils/fillRowWithoutFaultInOptimized(com.pivotal.gemfirexd.internal.engine.store.GemFireContainer,com.gemstone.gemfire.internal.cache.LocalRegion,com.pivotal.gemfirexd.internal.iapi.types.RowLocation,com.pivotal.gemfirexd.internal.engine.store.AbstractCompactExecRow)|",
    "v1Body": [
      "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/hasNextValue_$eq(boolean)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion$PRLocalScanIterator/getHostedBucketRegion()|",
      "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/currentVal()|",
      "|java+method:///org/apache/spark/sql/execution/row/PRValuesIterator/container()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion$PRLocalScanIterator/next()|",
      "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/itr()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion$PRLocalScanIterator/hasNext()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/RegionEntryUtils/fillRowWithoutFaultInOptimized(com.pivotal.gemfirexd.internal.engine.store.GemFireContainer,com.gemstone.gemfire.internal.cache.LocalRegion,com.pivotal.gemfirexd.internal.iapi.types.RowLocation,com.pivotal.gemfirexd.internal.engine.store.AbstractCompactExecRow)|"
    ],
    "v2Body": [
      "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/hasNextValue_$eq(boolean)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion$PRLocalScanIterator/getHostedBucketRegion()|",
      "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/currentVal()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion$PRLocalScanIterator/next()|",
      "|java+method:///org/apache/spark/sql/execution/row/CompactExecRowIteratorOnScan/itr()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion$PRLocalScanIterator/hasNext()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/RegionEntryUtils/fillRowWithoutFaultInOptimized(com.pivotal.gemfirexd.internal.engine.store.GemFireContainer,com.gemstone.gemfire.internal.cache.LocalRegion,com.pivotal.gemfirexd.internal.iapi.types.RowLocation,com.pivotal.gemfirexd.internal.engine.store.AbstractCompactExecRow)|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///io/snappydata/impl/SnappyHiveCatalog$HMSQuery/initHMC()|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getI18NLogWriter()|",
    "v1Body": [
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.Throwable)|",
      "|java+method:///org/apache/spark/sql/hive/SnappyStoreHiveCatalog/HIVE_METASTORE()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/lang/ThreadLocal/set(java.lang.Object)|",
      "|java+method:///org/apache/hadoop/hive/conf/HiveConf/setVar(org.apache.hadoop.hive.conf.HiveConf$ConfVars,java.lang.String)|",
      "|java+constructor:///org/apache/hadoop/hive/metastore/HiveMetaStoreClient/HiveMetaStoreClient(org.apache.hadoop.hive.conf.HiveConf)|",
      "|java+method:///org/apache/spark/sql/execution/datasources/jdbc/DriverRegistry/register(java.lang.String)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog/access$000(io.snappydata.impl.SnappyHiveCatalog)|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog/access$100(io.snappydata.impl.SnappyHiveCatalog)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/util/ArrayList/add(java.lang.Object)|",
      "|java+constructor:///org/apache/hadoop/hive/conf/HiveConf/HiveConf()|"
    ],
    "v2Body": [
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.Throwable)|",
      "|java+method:///java/lang/Thread/sleep(long)|",
      "|java+method:///org/apache/spark/sql/hive/SnappyStoreHiveCatalog/HIVE_METASTORE()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/lang/ThreadLocal/set(java.lang.Object)|",
      "|java+method:///org/apache/hadoop/hive/conf/HiveConf/setVar(org.apache.hadoop.hive.conf.HiveConf$ConfVars,java.lang.String)|",
      "|java+method:///com/gemstone/gemfire/i18n/LogWriterI18n/fineEnabled()|",
      "|java+constructor:///org/apache/hadoop/hive/metastore/HiveMetaStoreClient/HiveMetaStoreClient(org.apache.hadoop.hive.conf.HiveConf)|",
      "|java+method:///java/lang/Throwable/getCause()|",
      "|java+method:///org/apache/spark/sql/execution/datasources/jdbc/DriverRegistry/register(java.lang.String)|",
      "|java+constructor:///org/apache/hadoop/hive/conf/HiveConf/HiveConf()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/sql/SQLException/getSQLState()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getI18NLogWriter()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///com/gemstone/gemfire/i18n/LogWriterI18n/warning(com.gemstone.org.jgroups.util.StringId,java.lang.Object)|",
      "|java+method:///com/gemstone/gemfire/i18n/LogWriterI18n/warning(com.gemstone.org.jgroups.util.StringId,java.lang.Object,java.lang.Throwable)|",
      "|java+method:///java/lang/String/startsWith(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog/access$000(io.snappydata.impl.SnappyHiveCatalog)|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/getPartitionID(java.lang.String,int)|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
    "v1Body": [
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegionDataStore/getAllLocalPrimaryBucketIdArray()|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/rand()|",
      "|java+method:///scala/util/Random/nextInt(int)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/getConnection(java.lang.String,boolean)|",
      "|java+method:///com/gemstone/gnu/trove/TIntArrayList/size()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ExternalStoreUtils$/lookupName(java.lang.String,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ConnectionType$/Embedded()|",
      "|java+method:///java/sql/Connection/getSchema()|",
      "|java+method:///java/sql/Connection/close()|",
      "|java+method:///com/gemstone/gnu/trove/TIntArrayList/getQuick(int)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion/getDataStore()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/connectionType()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion/getTotalNumberOfBuckets()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/JDBCSourceAsStore/getPartitionID(java.lang.String,int)|"
    ],
    "v2Body": [
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegionDataStore/getAllLocalPrimaryBucketIdArray()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/rand()|",
      "|java+method:///scala/util/Random/nextInt(int)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/getConnection(java.lang.String,boolean)|",
      "|java+method:///com/gemstone/gnu/trove/TIntArrayList/size()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ExternalStoreUtils$/lookupName(java.lang.String,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ConnectionType$/Embedded()|",
      "|java+method:///java/sql/Connection/getSchema()|",
      "|java+method:///java/sql/Connection/close()|",
      "|java+method:///java/sql/Connection/commit()|",
      "|java+method:///com/gemstone/gnu/trove/TIntArrayList/getQuick(int)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion/getDataStore()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion/getTotalNumberOfBuckets()|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/org$apache$spark$sql$execution$columnar$impl$JDBCSourceAsColumnarStore$$connectionType()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore$$anonfun$doInsert$1/apply(java.sql.Connection)|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
    "v1Body": [
      "|java+method:///java/sql/Connection/prepareStatement(java.lang.String)|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///scala/math/package$/max(int,int)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatch/numRows()|",
      "|java+method:///scala/Tuple2/_1()|",
      "|java+constructor:///org/apache/spark/sql/execution/row/ResultSetTraversal/ResultSetTraversal(java.sql.Connection,java.sql.Statement,java.sql.ResultSet,org.apache.spark.TaskContext)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ExternalStoreUtils$/lookupName(java.lang.String,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+method:///scala/package$/Iterator()|",
      "|java+method:///org/apache/spark/sql/types/StructType/fields()|",
      "|java+constructor:///scala/Some/Some(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/store/CodeGeneration$/compileCode(java.lang.String,org.apache.spark.sql.types.StructField%5B%5D,scala.Function0)|",
      "|java+method:///org/apache/spark/sql/execution/BufferedRowIterator/hasNext()|",
      "|java+method:///%5BLjava/lang/Object;/clone()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/schema()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///scala/Tuple2/_2()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/tableName()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ConnectionType$/Embedded()|",
      "|java+method:///org/apache/spark/sql/sources/JdbcExtendedUtils$/getInsertOrPutString(java.lang.String,org.apache.spark.sql.types.StructType,boolean)|",
      "|java+method:///java/sql/Connection/getSchema()|",
      "|java+method:///scala/collection/Iterator$/apply(scala.collection.Seq)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/org$apache$spark$sql$execution$columnar$impl$JDBCSourceAsColumnarStore$$super$doInsert(java.lang.String,org.apache.spark.sql.execution.columnar.ColumnBatch,scala.Option,int,int)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$2/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$2(org.apache.spark.sql.execution.columnar.impl.JDBCSourceAsColumnarStore$$anonfun$doInsert$1,com.gemstone.gemfire.internal.cache.PartitionedRegion)|",
      "|java+method:///scala/Predef$/genericWrapArray(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/BufferedRowIterator/next()|",
      "|java+method:///org/apache/spark/sql/catalyst/expressions/codegen/GeneratedClass/generate(java.lang.Object%5B%5D)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/connectionType()|",
      "|java+method:///scala/Function1/apply(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/BufferedRowIterator/init(int,scala.collection.Iterator%5B%5D)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$1/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$1(org.apache.spark.sql.execution.columnar.impl.JDBCSourceAsColumnarStore$$anonfun$doInsert$1)|",
      "|java+method:///scala/runtime/BoxesRunTime/unboxToInt(java.lang.Object)|",
      "|java+method:///scala/Option/getOrElse(scala.Function0)|"
    ],
    "v2Body": [
      "|java+method:///java/sql/Connection/prepareStatement(java.lang.String)|",
      "|java+method:///scala/math/package$/max(int,int)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatch/numRows()|",
      "|java+method:///scala/Tuple2/_1()|",
      "|java+method:///scala/Tuple2/_2()|",
      "|java+constructor:///org/apache/spark/sql/execution/row/ResultSetTraversal/ResultSetTraversal(java.sql.Connection,java.sql.Statement,java.sql.ResultSet,org.apache.spark.TaskContext)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ExternalStoreUtils$/lookupName(java.lang.String,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$7/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$7(org.apache.spark.sql.execution.columnar.impl.JDBCSourceAsColumnarStore$$anonfun$doInsert$1,com.gemstone.gemfire.internal.cache.PartitionedRegion)|",
      "|java+method:///scala/package$/Iterator()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/doSnappyInsert(java.lang.String,org.apache.spark.sql.execution.columnar.ColumnBatch,scala.Option,int,int)|",
      "|java+constructor:///scala/Some/Some(java.lang.Object)|",
      "|java+method:///scala/Function1/apply(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatch/buffers()|",
      "|java+method:///org/apache/spark/sql/execution/BufferedRowIterator/hasNext()|",
      "|java+method:///%5BLjava/lang/Object;/clone()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/schema()|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/org$apache$spark$sql$execution$columnar$impl$JDBCSourceAsColumnarStore$$connectionType()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/tableName()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ConnectionType$/Embedded()|",
      "|java+method:///java/sql/Connection/getSchema()|",
      "|java+method:///scala/collection/Iterator$/apply(scala.collection.Seq)|",
      "|java+method:///org/apache/spark/sql/sources/JdbcExtendedUtils$/getInsertOrPutString(java.lang.String,org.apache.spark.sql.types.StructType,boolean,boolean)|",
      "|java+method:///org/apache/spark/sql/types/StructType/fields()|",
      "|java+method:///scala/collection/mutable/ArrayOps/foreach(scala.Function1)|",
      "|java+method:///scala/Predef$/genericWrapArray(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/BufferedRowIterator/next()|",
      "|java+method:///org/apache/spark/sql/catalyst/expressions/codegen/GeneratedClass/generate(java.lang.Object%5B%5D)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatchIterator$/apply(org.apache.spark.sql.execution.columnar.ColumnBatch)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$6/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$6(org.apache.spark.sql.execution.columnar.impl.JDBCSourceAsColumnarStore$$anonfun$doInsert$1)|",
      "|java+method:///org/apache/spark/sql/execution/BufferedRowIterator/init(int,scala.collection.Iterator%5B%5D)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$apply$5/JDBCSourceAsColumnarStore$$anonfun$doInsert$1$$anonfun$apply$5(org.apache.spark.sql.execution.columnar.impl.JDBCSourceAsColumnarStore$$anonfun$doInsert$1)|",
      "|java+method:///scala/runtime/BoxesRunTime/unboxToInt(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/JDBCSourceAsColumnarStore/doGFXDInsert(java.lang.String,org.apache.spark.sql.execution.columnar.ColumnBatch,scala.Option,int,int)|",
      "|java+method:///scala/Option/getOrElse(scala.Function0)|",
      "|java+method:///org/apache/spark/sql/store/CodeGeneration$/compileCode(java.lang.String,org.apache.spark.sql.types.StructField%5B%5D,scala.Function0)|",
      "|java+method:///scala/Predef$/refArrayOps(java.lang.Object%5B%5D)|",
      "|java+method:///org/apache/spark/sql/sources/JdbcExtendedUtils$/getInsertOrPutString$default$4()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/SnappyParser/wrapped$4()|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/iapi/types/SQLDecimal/getDecimalValuePrecision()|",
    "v1Body": [
      "|java+method:///org/parboiled2/Parser$TracingBubbleException/bubbleUp(org.parboiled2.RuleTrace$NonTerminalKey,int)|",
      "|java+method:///scala/Predef$/augmentString(java.lang.String)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/cursor()|",
      "|java+method:///org/apache/spark/sql/SnappyParser/valueStack()|",
      "|java+constructor:///org/parboiled2/RuleTrace$Named/RuleTrace$Named(java.lang.String)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/MONTH()|",
      "|java+method:///scala/collection/immutable/StringOps/toInt()|",
      "|java+method:///org/apache/spark/sql/SnappyParser/__push(java.lang.Object)|",
      "|java+method:///org/parboiled2/ValueStack/pop()|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToInteger(int)|",
      "|java+method:///org/parboiled2/Parser$TracingBubbleException/prepend(org.parboiled2.RuleTrace$NonTerminalKey,int)|",
      "|java+constructor:///scala/collection/immutable/StringOps/StringOps(java.lang.String)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/integral()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/spark/sql/SnappyParser/questionMark()|",
      "|java+method:///org/parboiled2/Parser$TracingBubbleException/bubbleUp(org.parboiled2.RuleTrace$NonTerminalKey,int)|",
      "|java+constructor:///org/parboiled2/RuleTrace$Named/RuleTrace$Named(java.lang.String)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/paramcounter_$eq(int)|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/questionMarkCounter()|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/pvs()|",
      "|java+method:///org/apache/spark/sql/execution/CachedPlanHelperExec$/getValue(com.pivotal.gemfirexd.internal.iapi.types.DataValueDescriptor)|",
      "|java+constructor:///org/apache/spark/sql/SnappyParser$$anonfun$wrapped$4$1/SnappyParser$$anonfun$wrapped$4$1(org.apache.spark.sql.SnappyParser)|",
      "|java+method:///org/apache/spark/sql/Row$/apply(scala.collection.Seq)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/ParameterValueSet/getParameter(int)|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/questionMarkCounter_$eq(int)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/addParamLiteralToContext(org.apache.spark.sql.catalyst.expressions.ParamLiteral)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/paramcounter()|",
      "|java+method:///scala/Option/get()|",
      "|java+method:///org/apache/spark/sql/SnappySession$/getDataType(int,int,int)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/types/SQLDecimal/getDecimalValuePrecision()|",
      "|java+method:///scala/Predef$/assert(boolean,scala.Function0)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/cursor()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/ParameterValueSet/getParameterCount()|",
      "|java+method:///scala/Option/isDefined()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/types/SQLDecimal/getDecimalValueScale()|",
      "|java+method:///org/apache/spark/sql/SnappySession/sessionState()|",
      "|java+constructor:///org/apache/spark/sql/SnappyParser$$anonfun$wrapped$4$2/SnappyParser$$anonfun$wrapped$4$2(org.apache.spark.sql.SnappyParser)|",
      "|java+method:///org/apache/spark/sql/internal/SnappySessionState/isPreparePhase()|",
      "|java+method:///org/apache/spark/sql/catalyst/expressions/ParamLiteral$/apply(java.lang.Object,org.apache.spark.sql.types.DataType,int)|",
      "|java+method:///org/apache/spark/sql/catalyst/CatalystTypeConverters$/convertToCatalyst(java.lang.Object)|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToInteger(int)|",
      "|java+method:///org/parboiled2/Parser$TracingBubbleException/prepend(org.parboiled2.RuleTrace$NonTerminalKey,int)|",
      "|java+method:///org/apache/spark/sql/SnappyParser/__push(java.lang.Object)|",
      "|java+method:///scala/Predef$/genericWrapArray(java.lang.Object)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/types/DataValueDescriptor/getTypeFormatId()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/columnar/impl/StoreCallbacksImpl$/createColumnBatch(com.gemstone.gemfire.internal.cache.BucketRegion,java.util.UUID,int)|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/fetchHiveMetaData(boolean)|",
    "v1Body": [
      "|java+method:///org/apache/spark/sql/types/StructType/length()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getMemStore()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/store/access/TransactionController/openScan(long,boolean,int,int,int,com.pivotal.gemfirexd.internal.iapi.services.io.FormatableBitSet,com.pivotal.gemfirexd.internal.iapi.types.DataValueDescriptor%5B%5D,int,com.pivotal.gemfirexd.internal.iapi.store.access.Qualifier%5B%5D%5B%5D,com.pivotal.gemfirexd.internal.iapi.types.DataValueDescriptor%5B%5D,int,com.pivotal.gemfirexd.internal.iapi.sql.Activation)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getId()|",
      "|java+method:///org/apache/spark/sql/types/StructField/name()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getGemFireCache()|",
      "|java+method:///scala/Predef$/int2Integer(int)|",
      "|java+method:///scala/collection/TraversableLike/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getLanguageConnectionContext()|",
      "|java+method:///java/util/Collections/singleton(java.lang.Object)|",
      "|java+method:///scala/collection/mutable/ArrayOps/toSeq()|",
      "|java+method:///scala/collection/Seq/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///scala/Predef$/refArrayOps(java.lang.Object%5B%5D)|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/EmbedConnection/getLanguageConnectionContext()|",
      "|java+method:///scala/collection/mutable/Buffer$/canBuildFrom()|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/TransactionResourceImpl/setupContextStack()|",
      "|java+method:///java/lang/Object/toString()|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/store/raw/ContainerKey/getContainerId()|",
      "|java+method:///scala/collection/Seq$/canBuildFrom()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/ColumnFormatRelation$/columnBatchTableName(java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/fetchHiveMetaData(boolean)|",
      "|java+method:///org/apache/spark/sql/types/StructType/add(java.lang.String,org.apache.spark.sql.types.DataType,boolean)|",
      "|java+method:///scala/collection/Seq$/empty()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/conn/LanguageConnectionContext/getTransactionExecute()|",
      "|java+method:///com/gemstone/gemfire/CancelCriterion/checkCancelInProgress(java.lang.Throwable)|",
      "|java+method:///java/util/Collections/emptySet()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/conn/LanguageConnectionContext/setExecuteLocally(java.util.Set,com.gemstone.gemfire.cache.Region,boolean,com.gemstone.gemfire.internal.cache.Checkpoint)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/BucketRegion/getPartitionedRegion()|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/EmbedConnection/getTR()|",
      "|java+method:///scala/collection/convert/Decorators$AsScala/asScala()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatchCreator/createAndStoreBatch(com.pivotal.gemfirexd.internal.iapi.store.access.ScanController,com.pivotal.gemfirexd.internal.engine.store.AbstractCompactExecRow,java.util.UUID,int,scala.collection.Seq)|",
      "|java+method:///org/apache/spark/sql/types/StructType/apply(int)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/StoreCallbacksImpl$$anonfun$1/StoreCallbacksImpl$$anonfun$1()|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/StoreCallbacksImpl$$anonfun$2/StoreCallbacksImpl$$anonfun$2(scala.collection.mutable.Buffer)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getQualifiedTableName()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion/getUserAttribute()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/distributed/utils/GemFireXDUtils/getTSSConnection(boolean,boolean,boolean)|",
      "|java+method:///scala/collection/JavaConverters$/asScalaBufferConverter(java.util.List)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/ColumnBatchCreator/ColumnBatchCreator(com.gemstone.gemfire.internal.cache.PartitionedRegion,java.lang.String,org.apache.spark.sql.types.StructType,org.apache.spark.sql.execution.columnar.ExternalStore,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireStore/getAllContainers()|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/TransactionResourceImpl/restoreContextStack()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/GemFireCacheImpl/getCancelCriterion()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/newTemplateRow()|",
      "|java+method:///org/apache/spark/sql/hive/ExternalTableType$/Sample()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/spark/sql/types/StructType/length()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/store/access/TransactionController/openScan(long,boolean,int,int,int,com.pivotal.gemfirexd.internal.iapi.services.io.FormatableBitSet,com.pivotal.gemfirexd.internal.iapi.types.DataValueDescriptor%5B%5D,int,com.pivotal.gemfirexd.internal.iapi.store.access.Qualifier%5B%5D%5B%5D,com.pivotal.gemfirexd.internal.iapi.types.DataValueDescriptor%5B%5D,int,com.pivotal.gemfirexd.internal.iapi.sql.Activation)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getId()|",
      "|java+method:///org/apache/spark/sql/types/StructField/name()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getGemFireCache()|",
      "|java+method:///scala/collection/TraversableLike/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getLanguageConnectionContext()|",
      "|java+method:///scala/collection/mutable/ArrayOps/toSeq()|",
      "|java+method:///scala/collection/Seq/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///scala/Predef$/refArrayOps(java.lang.Object%5B%5D)|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/EmbedConnection/getLanguageConnectionContext()|",
      "|java+method:///scala/collection/mutable/Buffer$/canBuildFrom()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/access/GemFireTransaction/setActiveTXState(com.gemstone.gemfire.internal.cache.TXStateInterface,boolean)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getMemStore()|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/TransactionResourceImpl/setupContextStack()|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/store/raw/ContainerKey/getContainerId()|",
      "|java+method:///scala/collection/Seq$/canBuildFrom()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/ColumnFormatRelation$/columnBatchTableName(java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/fetchHiveMetaData(boolean)|",
      "|java+method:///org/apache/spark/sql/types/StructType/add(java.lang.String,org.apache.spark.sql.types.DataType,boolean)|",
      "|java+method:///scala/collection/Seq$/empty()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/conn/LanguageConnectionContext/getTransactionExecute()|",
      "|java+method:///com/gemstone/gemfire/CancelCriterion/checkCancelInProgress(java.lang.Throwable)|",
      "|java+method:///java/util/Collections/emptySet()|",
      "|java+method:///com/pivotal/gemfirexd/internal/iapi/sql/conn/LanguageConnectionContext/setExecuteLocally(java.util.Set,com.gemstone.gemfire.cache.Region,boolean,com.gemstone.gemfire.internal.cache.Checkpoint)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/BucketRegion/getPartitionedRegion()|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/EmbedConnection/getTR()|",
      "|java+method:///scala/collection/convert/Decorators$AsScala/asScala()|",
      "|java+method:///org/apache/spark/sql/hive/ExternalTableType/name()|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatchCreator/createAndStoreBatch(com.pivotal.gemfirexd.internal.iapi.store.access.ScanController,com.pivotal.gemfirexd.internal.engine.store.AbstractCompactExecRow,java.util.UUID,int,scala.collection.Seq)|",
      "|java+method:///org/apache/spark/sql/types/StructType/apply(int)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/StoreCallbacksImpl$$anonfun$1/StoreCallbacksImpl$$anonfun$1()|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/StoreCallbacksImpl$$anonfun$2/StoreCallbacksImpl$$anonfun$2(scala.collection.mutable.Buffer)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/getQualifiedTableName()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/PartitionedRegion/getUserAttribute()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/distributed/utils/GemFireXDUtils/getTSSConnection(boolean,boolean,boolean)|",
      "|java+method:///scala/collection/JavaConverters$/asScalaBufferConverter(java.util.List)|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/ColumnBatchCreator/ColumnBatchCreator(com.gemstone.gemfire.internal.cache.PartitionedRegion,java.lang.String,org.apache.spark.sql.types.StructType,org.apache.spark.sql.execution.columnar.ExternalStore,java.lang.String)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireStore/getAllContainers()|",
      "|java+method:///com/pivotal/gemfirexd/internal/impl/jdbc/TransactionResourceImpl/restoreContextStack()|",
      "|java+method:///com/gemstone/gemfire/internal/cache/GemFireCacheImpl/getCancelCriterion()|",
      "|java+method:///scala/Predef$/int2Integer(int)|",
      "|java+method:///com/gemstone/gemfire/internal/cache/TXManagerImpl/getCurrentTXState()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/store/GemFireContainer/newTemplateRow()|",
      "|java+method:///org/apache/spark/sql/hive/ExternalTableType$/Sample()|",
      "|java+method:///java/util/Collections/singleton(java.lang.Object)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/access/GemFireTransaction/clearActiveTXState(boolean,boolean)|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+constructor:///io/snappydata/impl/SnappyHiveCatalog/SnappyHiveCatalog()|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getI18NLogWriter()|",
    "v1Body": [
      "|java+constructor:///java/lang/RuntimeException/RuntimeException(java.lang.Throwable)|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog/getHMSQuery()|",
      "|java+constructor:///io/snappydata/impl/SnappyHiveCatalog$1/SnappyHiveCatalog$1(io.snappydata.impl.SnappyHiveCatalog,java.lang.ThreadGroup)|",
      "|java+method:///com/gemstone/gemfire/internal/LogWriterImpl/createThreadGroup(java.lang.String,com.gemstone.gemfire.i18n.LogWriterI18n)|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog$HMSQuery/resetValues(int,java.lang.String,java.lang.String,boolean)|",
      "|java+method:///java/util/concurrent/Executors/newFixedThreadPool(int,java.util.concurrent.ThreadFactory)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getI18NLogWriter()|",
      "|java+constructor:///java/lang/ThreadLocal/ThreadLocal()|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+method:///java/util/concurrent/Future/get()|",
      "|java+constructor:///java/lang/Object/Object()|",
      "|java+method:///java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)|"
    ],
    "v2Body": [
      "|java+constructor:///java/lang/ThreadLocal/ThreadLocal()|",
      "|java+constructor:///java/lang/RuntimeException/RuntimeException(java.lang.Throwable)|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog/getHMSQuery()|",
      "|java+constructor:///io/snappydata/impl/SnappyHiveCatalog$1/SnappyHiveCatalog$1(io.snappydata.impl.SnappyHiveCatalog,java.lang.ThreadGroup)|",
      "|java+method:///com/gemstone/gemfire/internal/LogWriterImpl/createThreadGroup(java.lang.String,com.gemstone.gemfire.i18n.LogWriterI18n)|",
      "|java+method:///io/snappydata/impl/SnappyHiveCatalog$HMSQuery/resetValues(int,java.lang.String,java.lang.String,boolean)|",
      "|java+method:///java/util/concurrent/Executors/newFixedThreadPool(int,java.util.concurrent.ThreadFactory)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getI18NLogWriter()|",
      "|java+method:///java/util/concurrent/Future/get()|",
      "|java+constructor:///java/lang/Object/Object()|",
      "|java+method:///java/util/concurrent/ExecutorService/submit(java.util.concurrent.Callable)|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "io.snappydata:snappydata-core_2.11:0.8",
    "coordinatesV2": "io.snappydata:snappydata-core_2.11:0.9",
    "caller": "|java+method:///org/apache/spark/sql/execution/columnar/impl/ColumnarStorePartitionedRDD/compute(org.apache.spark.Partition,org.apache.spark.TaskContext)|",
    "called": "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
    "v1Body": [
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/ColumnarStorePartitionedRDD/org$apache$spark$sql$execution$columnar$impl$ColumnarStorePartitionedRDD$$tableName()|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/ColumnBatchIterator/ColumnBatchIterator(com.pivotal.gemfirexd.internal.engine.store.GemFireContainer,java.util.Set)|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/distributed/utils/GemFireXDUtils/getGemFireContainer(java.lang.String,boolean)|",
      "|java+method:///org/apache/spark/sql/collection/MultiBucketExecutorPartition/buckets()|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToInteger(int)|",
      "|java+method:///java/util/Collections/singleton(java.lang.Object)|",
      "|java+method:///org/apache/spark/Partition/index()|"
    ],
    "v2Body": [
      "|java+method:///scala/Option/foreach(scala.Function1)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/impl/ColumnarStorePartitionedRDD/org$apache$spark$sql$execution$columnar$impl$ColumnarStorePartitionedRDD$$tableName()|",
      "|java+constructor:///org/apache/spark/sql/execution/columnar/impl/ColumnarStorePartitionedRDD$$anonfun$compute$1/ColumnarStorePartitionedRDD$$anonfun$compute$1(org.apache.spark.sql.execution.columnar.impl.ColumnarStorePartitionedRDD)|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToInteger(int)|",
      "|java+method:///java/util/Collections/singleton(java.lang.Object)|",
      "|java+method:///org/apache/spark/Partition/index()|",
      "|java+method:///com/pivotal/gemfirexd/internal/engine/Misc/getRegionForTable(java.lang.String,boolean)|",
      "|java+method:///scala/Option$/apply(java.lang.Object)|",
      "|java+method:///org/apache/spark/sql/execution/columnar/ColumnBatchIterator$/apply(com.gemstone.gemfire.internal.cache.LocalRegion,java.util.Set,org.apache.spark.TaskContext)|",
      "|java+method:///org/apache/spark/sql/collection/MultiBucketExecutorPartition/buckets()|"
    ],
    "affectedLib": "io.snappydata:snappydata-store-core:1.5.5",
    "change": "UPDATED"
  }
]