[
  {
    "coordinatesV1": "net.openhft:chronicle-network:1.0.7-alpha",
    "coordinatesV2": "net.openhft:chronicle-network:1.0.34-beta",
    "caller": "|java+method:///net/openhft/chronicle/network/TcpEventHandler$WriteEventHandler/action()|",
    "called": "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
    "v1Body": [
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/tryWrite()|",
      "|java+method:///java/nio/channels/SocketChannel/isOpen()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$200(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$100(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$000(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
      "|java+method:///java/nio/ByteBuffer/remaining()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/invokeHandler()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/handleIOE(java.io.IOException)|"
    ],
    "v2Body": [
      "|java+method:///net/openhft/chronicle/network/api/TcpHandler/hasClientClosed()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$600(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$300(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$200(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$100(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
      "|java+method:///java/nio/ByteBuffer/remaining()|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$500(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///java/nio/channels/SocketChannel/isOpen()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$400(net.openhft.chronicle.network.TcpEventHandler)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/access$700(net.openhft.chronicle.network.TcpEventHandler,java.io.IOException,boolean)|"
    ],
    "affectedLib": "net.openhft:chronicle-threads:1.0.19-beta",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "net.openhft:chronicle-network:1.0.7-alpha",
    "coordinatesV2": "net.openhft:chronicle-network:1.0.34-beta",
    "caller": "|java+method:///net/openhft/chronicle/network/AcceptorEventHandler/action()|",
    "called": "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
    "v1Body": [
      "|java+constructor:///net/openhft/chronicle/network/TcpEventHandler/TcpEventHandler(java.nio.channels.SocketChannel,net.openhft.chronicle.network.api.TcpHandler,net.openhft.chronicle.network.api.session.SessionDetailsProvider)|",
      "|java+method:///java/util/function/Supplier/get()|",
      "|java+method:///java/nio/channels/ServerSocketChannel/isOpen()|",
      "|java+method:///java/nio/channels/SocketChannel/getRemoteAddress()|",
      "|java+method:///net/openhft/chronicle/threads/api/EventLoop/addHandler(net.openhft.chronicle.threads.api.EventHandler)|",
      "|java+method:///net/openhft/chronicle/network/api/session/SessionDetailsProvider/setClientAddress(java.net.InetSocketAddress)|",
      "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
      "|java+method:///org/slf4j/Logger/error(java.lang.String,java.lang.Throwable)|",
      "|java+method:///net/openhft/chronicle/network/AcceptorEventHandler/closeSocket()|",
      "|java+method:///java/nio/channels/ServerSocketChannel/accept()|"
    ],
    "v2Body": [
      "|java+constructor:///net/openhft/chronicle/network/TcpEventHandler/TcpEventHandler(java.nio.channels.SocketChannel,net.openhft.chronicle.network.api.TcpHandler,net.openhft.chronicle.network.api.session.SessionDetailsProvider,boolean,long,long)|",
      "|java+method:///java/util/function/Supplier/get()|",
      "|java+method:///java/nio/channels/ServerSocketChannel/isOpen()|",
      "|java+method:///net/openhft/chronicle/threads/api/EventLoop/addHandler(net.openhft.chronicle.threads.api.EventHandler)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String)|",
      "|java+method:///net/openhft/chronicle/network/api/session/SessionDetailsProvider/setClientAddress(java.net.InetSocketAddress)|",
      "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/slf4j/Logger/error(java.lang.String,java.lang.Throwable)|",
      "|java+method:///net/openhft/chronicle/network/AcceptorEventHandler/closeSocket()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/nio/channels/SocketChannel/getRemoteAddress()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///java/nio/channels/ServerSocketChannel/accept()|",
      "|java+method:///org/slf4j/Logger/isInfoEnabled()|"
    ],
    "affectedLib": "net.openhft:chronicle-threads:1.0.19-beta",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "net.openhft:chronicle-network:1.0.7-alpha",
    "coordinatesV2": "net.openhft:chronicle-network:1.0.34-beta",
    "caller": "|java+method:///net/openhft/chronicle/network/TcpEventHandler/action()|",
    "called": "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
    "v1Body": [
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/closeSC()|",
      "|java+method:///java/nio/channels/SocketChannel/isOpen()|",
      "|java+method:///java/nio/ByteBuffer/remaining()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/invokeHandler()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/handleIOE(java.io.IOException)|",
      "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
      "|java+method:///java/nio/channels/SocketChannel/read(java.nio.ByteBuffer)|"
    ],
    "v2Body": [
      "|java+method:///java/nio/ByteBuffer/position()|",
      "|java+method:///net/openhft/chronicle/network/NetworkLog/idle()|",
      "|java+method:///java/nio/channels/SocketChannel/isOpen()|",
      "|java+method:///net/openhft/chronicle/core/util/Time/tickTime()|",
      "|java+method:///net/openhft/chronicle/network/NetworkLog/log(java.nio.ByteBuffer,int,int)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler$WriteEventHandler/action()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/invokeHandler()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/sendHeartBeat()|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/handleIOE(java.io.IOException,boolean)|",
      "|java+method:///java/nio/ByteBuffer/remaining()|",
      "|java+method:///org/slf4j/Logger/error(java.lang.String,java.lang.Throwable)|",
      "|java+method:///net/openhft/chronicle/network/TcpEventHandler/closeSC()|",
      "|java+method:///net/openhft/chronicle/network/api/TcpHandler/hasClientClosed()|",
      "|java+constructor:///net/openhft/chronicle/threads/api/InvalidEventHandlerException/InvalidEventHandlerException()|",
      "|java+method:///net/openhft/chronicle/network/WanSimulator/dataRead(int)|",
      "|java+method:///java/nio/channels/SocketChannel/read(java.nio.ByteBuffer)|",
      "|java+method:///net/openhft/chronicle/network/api/TcpHandler/onEndOfConnection(boolean)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "affectedLib": "net.openhft:chronicle-threads:1.0.19-beta",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "net.openhft:chronicle-network:1.0.7-alpha",
    "coordinatesV2": "net.openhft:chronicle-network:1.0.34-beta",
    "caller": "|java+method:///net/openhft/chronicle/network/WireTcpHandler/read(net.openhft.chronicle.bytes.Bytes,net.openhft.chronicle.bytes.Bytes,net.openhft.chronicle.network.api.session.SessionDetailsProvider)|",
    "called": "|java+method:///net/openhft/chronicle/bytes/Bytes/toHexString()|",
    "v1Body": [
      "|java+method:///net/openhft/chronicle/wire/Wire/bytes()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readPosition()|",
      "|java+method:///java/lang/Long/valueOf(long)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readPosition(long)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError(java.lang.Object)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readInt(long)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readRemaining()|",
      "|java+method:///java/lang/StringBuilder/append(long)|",
      "|java+method:///org/slf4j/Logger/error(java.lang.String,java.lang.Throwable)|",
      "|java+method:///java/lang/Thread/yield()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/writePosition()|",
      "|java+method:///org/slf4j/Logger/isDebugEnabled()|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/toHexString()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readSkip(long)|",
      "|java+method:///net/openhft/chronicle/network/WireTcpHandler/process(net.openhft.chronicle.wire.Wire,net.openhft.chronicle.wire.Wire,net.openhft.chronicle.network.api.session.SessionDetailsProvider)|",
      "|java+method:///net/openhft/chronicle/wire/Wires/lengthOf(long)|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String,java.lang.Throwable)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readLimit()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/toDebugString()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readLimit(long)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///net/openhft/chronicle/wire/Wires/isData(long)|"
    ],
    "v2Body": [
      "|java+method:///net/openhft/chronicle/wire/Wire/bytes()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readPosition()|",
      "|java+method:///java/lang/Long/valueOf(long)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readPosition(long)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError(java.lang.Object)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readInt(long)|",
      "|java+method:///java/lang/String/format(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readRemaining()|",
      "|java+method:///java/lang/StringBuilder/append(long)|",
      "|java+method:///org/slf4j/Logger/error(java.lang.String,java.lang.Throwable)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/writePosition()|",
      "|java+method:///org/slf4j/Logger/isDebugEnabled()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String)|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/toHexString()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readSkip(long)|",
      "|java+method:///net/openhft/chronicle/wire/Wires/lengthOf(long)|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String,java.lang.Throwable)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readLimit()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/toDebugString()|",
      "|java+method:///net/openhft/chronicle/bytes/Bytes/readLimit(long)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///net/openhft/chronicle/wire/Wires/isData(long)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|",
      "|java+method:///net/openhft/chronicle/network/WireTcpHandler/process(net.openhft.chronicle.wire.WireIn,net.openhft.chronicle.wire.WireOut,net.openhft.chronicle.network.api.session.SessionDetailsProvider)|"
    ],
    "affectedLib": "net.openhft:chronicle-bytes:1.1.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "net.openhft:chronicle-network:1.0.7-alpha",
    "coordinatesV2": "net.openhft:chronicle-network:1.0.34-beta",
    "caller": "|java+initializer:///net/openhft/chronicle/network/WireTcpHandler/WireTcpHandler$initializer|",
    "called": "|java+method:///org/slf4j/LoggerFactory/getLogger(java.lang.Class)|",
    "v1Body": [
      "|java+method:///org/slf4j/LoggerFactory/getLogger(java.lang.Class)|",
      "|java+method:///java/lang/Class/desiredAssertionStatus()|"
    ],
    "v2Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///org/slf4j/LoggerFactory/getLogger(java.lang.Class)|",
      "|java+method:///java/lang/Integer/getInteger(java.lang.String,int)|",
      "|java+method:///java/lang/Class/desiredAssertionStatus()|"
    ],
    "affectedLib": "org.slf4j:slf4j-api:1.7.12",
    "change": "UPDATED"
  }
]