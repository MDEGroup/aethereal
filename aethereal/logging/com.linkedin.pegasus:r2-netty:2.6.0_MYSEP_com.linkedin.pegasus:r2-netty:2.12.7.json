[
  {
    "coordinatesV1": "com.linkedin.pegasus:r2-netty:2.6.0",
    "coordinatesV2": "com.linkedin.pegasus:r2-netty:2.12.7",
    "caller": "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getClient(java.util.Map,javax.net.ssl.SSLContext,javax.net.ssl.SSLParameters)|",
    "called": "|java+constructor:///com/linkedin/r2/filter/compression/ClientCompressionFilter/ClientCompressionFilter(com.linkedin.r2.filter.compression.EncodingType,com.linkedin.r2.filter.CompressionConfig,com.linkedin.r2.filter.compression.EncodingType%5B%5D,com.linkedin.r2.filter.CompressionConfig,java.util.List)|",
    "v1Body": [
      "|java+constructor:///com/linkedin/r2/filter/transport/FilterChainClient/FilterChainClient(com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.filter.FilterChain)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpClientFactory$FactoryClient/HttpClientFactory$FactoryClient(com.linkedin.r2.transport.http.client.HttpClientFactory,com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.transport.http.client.HttpClientFactory$1)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getCompressionConfig(java.lang.String,java.lang.String)|",
      "|java+constructor:///com/linkedin/r2/filter/transport/ClientQueryTunnelFilter/ClientQueryTunnelFilter(int)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///com/linkedin/r2/filter/compression/ClientCompressionFilter/ClientCompressionFilter(java.lang.String,com.linkedin.r2.filter.CompressionConfig,java.lang.String,java.util.List)|",
      "|java+method:///com/linkedin/r2/util/ConfigValueExtractor/buildList(java.lang.Object,java.lang.String)|",
      "|java+method:///java/util/Map/remove(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/buildAcceptEncodingSchemaNames()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRawClient(java.util.Map,javax.net.ssl.SSLContext,javax.net.ssl.SSLParameters)|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String)|",
      "|java+method:///com/linkedin/r2/filter/FilterChain/addLast(com.linkedin.r2.filter.Filter)|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/chooseNewOverDefault(java.lang.Object,java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRequestContentEncodingName(java.util.List)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getIntValue(java.util.Map,java.lang.String)|"
    ],
    "v2Body": [
      "|java+method:///com/linkedin/r2/filter/FilterChain/addLastRest(com.linkedin.r2.filter.message.rest.RestFilter)|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRequestCompressionConfig(java.lang.String,com.linkedin.r2.filter.compression.EncodingType)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/chooseNewOverDefault(java.lang.Object,java.lang.Object)|",
      "|java+method:///java/util/Map/containsKey(java.lang.Object)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/util/ConfigValueExtractor/buildList(java.lang.Object,java.lang.String)|",
      "|java+method:///java/util/Map/remove(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRawClient(java.util.Map,javax.net.ssl.SSLContext,javax.net.ssl.SSLParameters)|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+constructor:///com/linkedin/r2/filter/compression/ClientCompressionFilter/ClientCompressionFilter(com.linkedin.r2.filter.compression.EncodingType,com.linkedin.r2.filter.CompressionConfig,com.linkedin.r2.filter.compression.EncodingType%5B%5D,com.linkedin.r2.filter.CompressionConfig,java.util.List)|",
      "|java+constructor:///com/linkedin/r2/filter/transport/FilterChainClient/FilterChainClient(com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.filter.FilterChain)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpClientFactory$FactoryClient/HttpClientFactory$FactoryClient(com.linkedin.r2.transport.http.client.HttpClientFactory,com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.transport.http.client.HttpClientFactory$1)|",
      "|java+method:///java/lang/Boolean/parseBoolean(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRequestContentEncoding(java.util.List)|",
      "|java+constructor:///com/linkedin/r2/filter/transport/ClientQueryTunnelFilter/ClientQueryTunnelFilter(int)|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/buildAcceptEncodingSchemas(java.util.List)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getIntValue(java.util.Map,java.lang.String)|"
    ],
    "affectedLib": "com.linkedin.pegasus:r2-filter-compression:2.12.7",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.linkedin.pegasus:r2-netty:2.6.0",
    "coordinatesV2": "com.linkedin.pegasus:r2-netty:2.12.7",
    "caller": "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient$ChannelPoolFactoryImpl/getPool(java.net.SocketAddress)|",
    "called": "|java+constructor:///com/linkedin/r2/transport/http/client/ExponentialBackOffRateLimiter/ExponentialBackOffRateLimiter(long,long,long,java.util.concurrent.ScheduledExecutorService,int)|",
    "v1Body": [
      "|java+method:///java/lang/Object/toString()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$400(com.linkedin.r2.transport.http.client.HttpNettyClient)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/AsyncPoolImpl/AsyncPoolImpl(java.lang.String,com.linkedin.r2.transport.http.client.AsyncPool$Lifecycle,int,long,java.util.concurrent.ScheduledExecutorService,int,com.linkedin.r2.transport.http.client.AsyncPoolImpl$Strategy,int,com.linkedin.r2.transport.http.client.RateLimiter)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$1000(com.linkedin.r2.transport.http.client.HttpNettyClient)|",
      "|java+method:///java/lang/Math/max(long,long)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/ChannelPoolLifecycle/ChannelPoolLifecycle(java.net.SocketAddress,io.netty.bootstrap.Bootstrap,io.netty.channel.group.ChannelGroup)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/ExponentialBackOffRateLimiter/ExponentialBackOffRateLimiter(long,long,long,java.util.concurrent.ScheduledExecutorService)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$300(com.linkedin.r2.transport.http.client.HttpNettyClient)|"
    ],
    "v2Body": [
      "|java+method:///java/lang/Object/toString()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$400(com.linkedin.r2.transport.http.client.HttpNettyClient)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/AsyncPoolImpl/AsyncPoolImpl(java.lang.String,com.linkedin.r2.transport.http.client.AsyncPool$Lifecycle,int,long,java.util.concurrent.ScheduledExecutorService,int,com.linkedin.r2.transport.http.client.AsyncPoolImpl$Strategy,int,com.linkedin.r2.transport.http.client.RateLimiter)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$1100(com.linkedin.r2.transport.http.client.HttpNettyClient)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$1000(com.linkedin.r2.transport.http.client.HttpNettyClient)|",
      "|java+method:///java/lang/Math/max(long,long)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/ExponentialBackOffRateLimiter/ExponentialBackOffRateLimiter(long,long,long,java.util.concurrent.ScheduledExecutorService,int)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/ChannelPoolLifecycle/ChannelPoolLifecycle(java.net.SocketAddress,io.netty.bootstrap.Bootstrap,io.netty.channel.group.ChannelGroup)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/access$300(com.linkedin.r2.transport.http.client.HttpNettyClient)|"
    ],
    "affectedLib": "com.linkedin.pegasus:r2-core:2.12.7",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.linkedin.pegasus:r2-netty:2.6.0",
    "coordinatesV2": "com.linkedin.pegasus:r2-netty:2.12.7",
    "caller": "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/writeRequest(com.linkedin.r2.message.rest.RestRequest,com.linkedin.r2.message.RequestContext,java.util.Map,com.linkedin.r2.transport.http.client.TimeoutTransportCallback)|",
    "called": "|java+method:///com/linkedin/r2/message/rest/RestRequestBuilder/build()|",
    "v1Body": [
      "|java+method:///com/linkedin/r2/transport/http/client/ChannelPoolManager/getPoolForAddress(java.net.SocketAddress)|",
      "|java+constructor:///java/net/InetSocketAddress/InetSocketAddress(java.lang.String,int)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/AsyncPool/get(com.linkedin.common.callback.Callback)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpNettyClient$3/HttpNettyClient$3(com.linkedin.r2.transport.http.client.HttpNettyClient,com.linkedin.r2.util.Cancellable)|",
      "|java+method:///java/net/URI/getScheme()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/util/concurrent/atomic/AtomicReference/get()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/common/WireAttributeHelper/toWireAttributes(java.util.Map)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/String/equalsIgnoreCase(java.lang.String)|",
      "|java+method:///com/linkedin/r2/message/rest/RestRequestBuilder/build()|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/TimeoutTransportCallback/addTimeoutTask(java.lang.Runnable)|",
      "|java+method:///com/linkedin/r2/message/rest/RestRequest/getURI()|",
      "|java+method:///com/linkedin/r2/message/rest/RestRequestBuilder/overwriteHeaders(java.util.Map)|",
      "|java+method:///java/net/URI/getPort()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/errorResponse(com.linkedin.r2.transport.common.bridge.common.TransportCallback,java.lang.Throwable)|",
      "|java+constructor:///com/linkedin/r2/message/rest/RestRequestBuilder/RestRequestBuilder(com.linkedin.r2.message.rest.RestRequest)|",
      "|java+method:///java/net/URI/getHost()|",
      "|java+constructor:///java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpNettyClient$2/HttpNettyClient$2(com.linkedin.r2.transport.http.client.HttpNettyClient,com.linkedin.r2.transport.http.client.AsyncPool,com.linkedin.r2.transport.http.client.TimeoutTransportCallback,com.linkedin.r2.message.rest.RestRequest)|"
    ],
    "v2Body": [
      "|java+method:///com/linkedin/r2/transport/http/client/ChannelPoolManager/getPoolForAddress(java.net.SocketAddress)|",
      "|java+constructor:///java/net/InetSocketAddress/InetSocketAddress(java.net.InetAddress,int)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/AsyncPool/get(com.linkedin.common.callback.Callback)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpNettyClient$3/HttpNettyClient$3(com.linkedin.r2.transport.http.client.HttpNettyClient,com.linkedin.r2.util.Cancellable)|",
      "|java+method:///java/net/URI/getScheme()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/util/concurrent/atomic/AtomicReference/get()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/common/WireAttributeHelper/toWireAttributes(java.util.Map)|",
      "|java+method:///java/lang/String/equalsIgnoreCase(java.lang.String)|",
      "|java+method:///com/linkedin/r2/message/rest/RestRequestBuilder/build()|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/TimeoutTransportCallback/addTimeoutTask(java.lang.Runnable)|",
      "|java+method:///com/linkedin/r2/message/rest/RestRequest/getURI()|",
      "|java+method:///com/linkedin/r2/message/rest/RestRequestBuilder/overwriteHeaders(java.util.Map)|",
      "|java+method:///java/net/URI/getPort()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpNettyClient/errorResponse(com.linkedin.r2.transport.common.bridge.common.TransportCallback,java.lang.Throwable)|",
      "|java+constructor:///com/linkedin/r2/message/rest/RestRequestBuilder/RestRequestBuilder(com.linkedin.r2.message.rest.RestRequest)|",
      "|java+method:///java/net/URI/getHost()|",
      "|java+constructor:///java/lang/IllegalArgumentException/IllegalArgumentException(java.lang.String)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpNettyClient$2/HttpNettyClient$2(com.linkedin.r2.transport.http.client.HttpNettyClient,com.linkedin.r2.transport.http.client.AsyncPool,com.linkedin.r2.transport.http.client.TimeoutTransportCallback,com.linkedin.r2.message.rest.RestRequest)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/net/InetAddress/getByName(java.lang.String)|"
    ],
    "affectedLib": "com.linkedin.pegasus:r2-core:2.12.7",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.linkedin.pegasus:r2-netty:2.6.0",
    "coordinatesV2": "com.linkedin.pegasus:r2-netty:2.12.7",
    "caller": "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getClient(java.util.Map,javax.net.ssl.SSLContext,javax.net.ssl.SSLParameters)|",
    "called": "|java+method:///com/linkedin/r2/util/ConfigValueExtractor/buildList(java.lang.Object,java.lang.String)|",
    "v1Body": [
      "|java+constructor:///com/linkedin/r2/filter/transport/FilterChainClient/FilterChainClient(com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.filter.FilterChain)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpClientFactory$FactoryClient/HttpClientFactory$FactoryClient(com.linkedin.r2.transport.http.client.HttpClientFactory,com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.transport.http.client.HttpClientFactory$1)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getCompressionConfig(java.lang.String,java.lang.String)|",
      "|java+constructor:///com/linkedin/r2/filter/transport/ClientQueryTunnelFilter/ClientQueryTunnelFilter(int)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///com/linkedin/r2/filter/compression/ClientCompressionFilter/ClientCompressionFilter(java.lang.String,com.linkedin.r2.filter.CompressionConfig,java.lang.String,java.util.List)|",
      "|java+method:///com/linkedin/r2/util/ConfigValueExtractor/buildList(java.lang.Object,java.lang.String)|",
      "|java+method:///java/util/Map/remove(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/buildAcceptEncodingSchemaNames()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRawClient(java.util.Map,javax.net.ssl.SSLContext,javax.net.ssl.SSLParameters)|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String)|",
      "|java+method:///com/linkedin/r2/filter/FilterChain/addLast(com.linkedin.r2.filter.Filter)|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/chooseNewOverDefault(java.lang.Object,java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRequestContentEncodingName(java.util.List)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getIntValue(java.util.Map,java.lang.String)|"
    ],
    "v2Body": [
      "|java+method:///com/linkedin/r2/filter/FilterChain/addLastRest(com.linkedin.r2.filter.message.rest.RestFilter)|",
      "|java+constructor:///java/lang/IllegalStateException/IllegalStateException(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRequestCompressionConfig(java.lang.String,com.linkedin.r2.filter.compression.EncodingType)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/chooseNewOverDefault(java.lang.Object,java.lang.Object)|",
      "|java+method:///java/util/Map/containsKey(java.lang.Object)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/util/ConfigValueExtractor/buildList(java.lang.Object,java.lang.String)|",
      "|java+method:///java/util/Map/remove(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRawClient(java.util.Map,javax.net.ssl.SSLContext,javax.net.ssl.SSLParameters)|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+constructor:///com/linkedin/r2/filter/compression/ClientCompressionFilter/ClientCompressionFilter(com.linkedin.r2.filter.compression.EncodingType,com.linkedin.r2.filter.CompressionConfig,com.linkedin.r2.filter.compression.EncodingType%5B%5D,com.linkedin.r2.filter.CompressionConfig,java.util.List)|",
      "|java+constructor:///com/linkedin/r2/filter/transport/FilterChainClient/FilterChainClient(com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.filter.FilterChain)|",
      "|java+constructor:///com/linkedin/r2/transport/http/client/HttpClientFactory$FactoryClient/HttpClientFactory$FactoryClient(com.linkedin.r2.transport.http.client.HttpClientFactory,com.linkedin.r2.transport.common.bridge.client.TransportClient,com.linkedin.r2.transport.http.client.HttpClientFactory$1)|",
      "|java+method:///java/lang/Boolean/parseBoolean(java.lang.String)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getRequestContentEncoding(java.util.List)|",
      "|java+constructor:///com/linkedin/r2/filter/transport/ClientQueryTunnelFilter/ClientQueryTunnelFilter(int)|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/buildAcceptEncodingSchemas(java.util.List)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///com/linkedin/r2/transport/http/client/HttpClientFactory/getIntValue(java.util.Map,java.lang.String)|"
    ],
    "affectedLib": "com.linkedin.pegasus:r2-core:2.12.7",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.linkedin.pegasus:r2-netty:2.6.0",
    "coordinatesV2": "com.linkedin.pegasus:r2-netty:2.12.7",
    "caller": "|java+method:///com/linkedin/r2/transport/http/client/RAPResponseHandler/channelRead0(io.netty.channel.ChannelHandlerContext,com.linkedin.r2.message.rest.RestResponse)|",
    "called": "|java+method:///com/linkedin/r2/message/rest/RestResponseBuilder/build()|",
    "v1Body": [
      "|java+method:///io/netty/channel/ChannelHandlerContext/fireChannelRead(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/common/bridge/common/TransportResponseImpl/success(java.lang.Object,java.util.Map)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+constructor:///java/util/HashMap/HashMap(java.util.Map)|",
      "|java+method:///io/netty/util/Attribute/getAndRemove()|",
      "|java+method:///com/linkedin/r2/transport/common/WireAttributeHelper/removeWireAttributes(java.util.Map)|",
      "|java+method:///com/linkedin/r2/message/rest/RestResponseBuilder/build()|",
      "|java+method:///io/netty/channel/Channel/remoteAddress()|",
      "|java+method:///com/linkedin/r2/message/rest/RestResponse/getHeaders()|",
      "|java+method:///io/netty/channel/Channel/attr(io.netty.util.AttributeKey)|",
      "|java+constructor:///com/linkedin/r2/message/rest/RestResponseBuilder/RestResponseBuilder(com.linkedin.r2.message.rest.RestResponse)|",
      "|java+method:///com/linkedin/r2/transport/common/bridge/common/TransportCallback/onResponse(com.linkedin.r2.transport.common.bridge.common.TransportResponse)|",
      "|java+method:///com/linkedin/r2/message/rest/RestResponseBuilder/unsafeSetHeaders(java.util.Map)|",
      "|java+method:///io/netty/channel/ChannelHandlerContext/channel()|"
    ],
    "v2Body": [
      "|java+method:///io/netty/channel/ChannelHandlerContext/fireChannelRead(java.lang.Object)|",
      "|java+method:///com/linkedin/r2/transport/common/bridge/common/TransportResponseImpl/success(java.lang.Object,java.util.Map)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///io/netty/util/Attribute/getAndRemove()|",
      "|java+method:///java/util/Map/putAll(java.util.Map)|",
      "|java+method:///com/linkedin/r2/transport/common/WireAttributeHelper/removeWireAttributes(java.util.Map)|",
      "|java+method:///com/linkedin/r2/message/rest/RestResponseBuilder/build()|",
      "|java+method:///com/linkedin/r2/message/rest/RestResponse/getHeaders()|",
      "|java+method:///io/netty/channel/Channel/attr(io.netty.util.AttributeKey)|",
      "|java+constructor:///com/linkedin/r2/message/rest/RestResponseBuilder/RestResponseBuilder(com.linkedin.r2.message.rest.RestResponse)|",
      "|java+method:///com/linkedin/r2/transport/common/bridge/common/TransportCallback/onResponse(com.linkedin.r2.transport.common.bridge.common.TransportResponse)|",
      "|java+method:///com/linkedin/r2/message/rest/RestResponseBuilder/unsafeSetHeaders(java.util.Map)|",
      "|java+method:///io/netty/channel/ChannelHandlerContext/channel()|",
      "|java+constructor:///java/util/TreeMap/TreeMap(java.util.Comparator)|",
      "|java+method:///io/netty/channel/Channel/remoteAddress()|"
    ],
    "affectedLib": "com.linkedin.pegasus:r2-core:2.12.7",
    "change": "UPDATED"
  }
]