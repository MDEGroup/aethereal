[
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+constructor:///axle/package$/package$()|",
    "called": "|java+method:///cats/Show$/fromToString()|",
    "v1Body": [
      "|java+method:///spire/algebra/Order$/from$mDc$sp(scala.Function2)|",
      "|java+method:///spire/algebra/Order$/from$mCc$sp(scala.Function2)|",
      "|java+constructor:///axle/package$$anon$2/package$$anon$2()|",
      "|java+method:///spire/algebra/Order$/from$mZc$sp(scala.Function2)|",
      "|java+constructor:///java/lang/Object/Object()|",
      "|java+method:///cats/Show$/fromToString()|",
      "|java+method:///spire/algebra/Order$/from(scala.Function2)|",
      "|java+constructor:///axle/package$$anonfun$4/package$$anonfun$4()|",
      "|java+constructor:///axle/package$$anonfun$6/package$$anonfun$6()|",
      "|java+constructor:///axle/package$$anonfun$5/package$$anonfun$5()|",
      "|java+constructor:///axle/package$$anon$1/package$$anon$1()|",
      "|java+constructor:///axle/package$$anonfun$1/package$$anonfun$1()|"
    ],
    "v2Body": [
      "|java+method:///spire/math/Real$/algebra()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///spire/algebra/Order$/apply(spire.algebra.Order)|",
      "|java+method:///cats/Show$/fromToString()|",
      "|java+method:///cats/kernel/Eq$/instance(scala.Function2)|",
      "|java+constructor:///axle/package$$anonfun$5/package$$anonfun$5()|",
      "|java+method:///cats/kernel/Order$/from(scala.Function2)|",
      "|java+method:///spire/algebra/Eq$/apply(spire.algebra.Eq)|",
      "|java+constructor:///java/lang/Object/Object()|",
      "|java+constructor:///axle/package$$anonfun$4/package$$anonfun$4(spire.algebra.Order)|",
      "|java+constructor:///axle/package$$anonfun$2/package$$anonfun$2(spire.algebra.Order)|",
      "|java+constructor:///axle/package$$anonfun$1/package$$anonfun$1(spire.algebra.Eq)|",
      "|java+constructor:///axle/package$$anonfun$3/package$$anonfun$3(spire.algebra.Eq)|"
    ],
    "affectedLib": "org.typelevel:cats-core_2.11:0.8.1",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/algebra/Tics$$anon$1/tics(double,double)|",
    "called": "|java+method:///spire/math/package$/ceil(double)|",
    "v1Body": [
      "|java+method:///java/lang/Double/isNaN()|",
      "|java+method:///scala/Predef$/double2Double(double)|",
      "|java+method:///axle/algebra/Tics$$anon$1/step(double,double)|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+constructor:///axle/algebra/Tics$$anon$1$$anonfun$tics$1/Tics$$anon$1$$anonfun$tics$1(axle.algebra.Tics$$anon$1,double,scala.math.BigDecimal)|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToDouble(double)|",
      "|java+method:///scala/collection/immutable/IndexedSeq$/canBuildFrom()|",
      "|java+method:///scala/collection/immutable/List$/apply(scala.collection.Seq)|",
      "|java+method:///scala/package$/BigDecimal()|",
      "|java+method:///spire/math/package$/floor(double)|",
      "|java+method:///scala/runtime/RichInt$/to$extension0(int,int)|",
      "|java+method:///scala/Predef$/intWrapper(int)|",
      "|java+method:///scala/collection/immutable/Range$Inclusive/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+constructor:///axle/algebra/Tics$$anon$1$$anonfun$tics$2/Tics$$anon$1$$anonfun$tics$2(axle.algebra.Tics$$anon$1,double,double)|",
      "|java+method:///spire/math/package$/ceil(double)|",
      "|java+method:///spire/implicits$/DoubleAlgebra()|",
      "|java+method:///scala/runtime/RichDouble$/isInfinity$extension(double)|",
      "|java+method:///scala/collection/TraversableLike/filter(scala.Function1)|",
      "|java+method:///scala/math/BigDecimal$/valueOf(double)|",
      "|java+method:///scala/Predef$/doubleWrapper(double)|",
      "|java+method:///spire/std/DoubleAlgebra/eqv$mcD$sp(double,double)|",
      "|java+constructor:///scala/Tuple2/Tuple2(java.lang.Object,java.lang.Object)|"
    ],
    "v2Body": [
      "|java+method:///java/lang/Double/isNaN()|",
      "|java+method:///scala/Predef$/double2Double(double)|",
      "|java+method:///axle/algebra/Tics$$anon$1/step(double,double)|",
      "|java+method:///cats/implicits$/catsKernelStdOrderForDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+constructor:///axle/algebra/Tics$$anon$1$$anonfun$tics$1/Tics$$anon$1$$anonfun$tics$1(axle.algebra.Tics$$anon$1,double,scala.math.BigDecimal)|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToDouble(double)|",
      "|java+method:///scala/collection/immutable/List$/apply(scala.collection.Seq)|",
      "|java+method:///scala/package$/BigDecimal()|",
      "|java+method:///spire/math/package$/floor(double)|",
      "|java+method:///scala/runtime/RichInt$/to$extension0(int,int)|",
      "|java+constructor:///scala/Tuple2/Tuple2(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/Predef$/intWrapper(int)|",
      "|java+method:///scala/collection/immutable/Range$Inclusive/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+constructor:///axle/algebra/Tics$$anon$1$$anonfun$tics$2/Tics$$anon$1$$anonfun$tics$2(axle.algebra.Tics$$anon$1,double,double)|",
      "|java+method:///spire/math/package$/ceil(double)|",
      "|java+method:///scala/runtime/RichDouble$/isInfinity$extension(double)|",
      "|java+method:///scala/collection/TraversableLike/filter(scala.Function1)|",
      "|java+method:///scala/collection/immutable/IndexedSeq$/canBuildFrom()|",
      "|java+method:///cats/kernel/Order/eqv$mcD$sp(double,double)|",
      "|java+method:///scala/math/BigDecimal$/valueOf(double)|",
      "|java+method:///scala/Predef$/doubleWrapper(double)|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/game/Strategies$$anonfun$aiMover$1/apply(java.lang.Object,java.lang.Object)|",
    "called": "|java+method:///spire/math/Rational$/apply(int)|",
    "v1Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/game/Strategies$/minimax(java.lang.Object,java.lang.Object,int,scala.Function1,spire.algebra.Order,spire.algebra.Eq,axle.game.Game)|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///scala/Tuple3/_2()|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,spire.algebra.Order,spire.random.Dist)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/game/Strategies$$anonfun$aiMover$1/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/math/Rational$/apply(int)|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///scala/Tuple3/_1()|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///scala/Tuple3/_3()|",
      "|java+constructor:///scala/MatchError/MatchError(java.lang.Object)|",
      "|java+constructor:///scala/Tuple3/Tuple3(java.lang.Object,java.lang.Object,java.lang.Object)|"
    ],
    "v2Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/package$/orderRational()|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///scala/Tuple3/_2()|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/math/Rational$/apply(int)|",
      "|java+method:///axle/game/Strategies$/minimax(java.lang.Object,java.lang.Object,int,scala.Function1,cats.kernel.Order,axle.game.Game)|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///scala/Tuple3/_1()|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///scala/Tuple3/_3()|",
      "|java+constructor:///scala/MatchError/MatchError(java.lang.Object)|",
      "|java+constructor:///scala/Tuple3/Tuple3(java.lang.Object,java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/game/Strategies$$anonfun$aiMover$1/apply(java.lang.Object,java.lang.Object)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,cats.kernel.Order,spire.random.Dist)|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/game/Strategies$$anonfun$interactiveMove$1/apply(java.lang.Object,java.lang.Object)|",
    "called": "|java+method:///spire/math/Rational$/apply(int)|",
    "v1Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,spire.algebra.Order,spire.random.Dist)|",
      "|java+method:///axle/game/Strategies$/userInputStream(scala.Function1,scala.Function0)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/util/Either/right()|",
      "|java+method:///axle/game/Game/moverM(java.lang.Object,java.lang.Object)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$interactiveMove$1$$anonfun$5/Strategies$$anonfun$interactiveMove$1$$anonfun$5(axle.game.Strategies$$anonfun$interactiveMove$1,scala.Function1,java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/collection/immutable/Stream/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$interactiveMove$1$$anonfun$4/Strategies$$anonfun$interactiveMove$1$$anonfun$4(axle.game.Strategies$$anonfun$interactiveMove$1)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$interactiveMove$1$$anonfun$apply$3/Strategies$$anonfun$interactiveMove$1$$anonfun$apply$3(axle.game.Strategies$$anonfun$interactiveMove$1)|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///scala/collection/immutable/Stream$/canBuildFrom()|",
      "|java+method:///scala/collection/immutable/Stream/find(scala.Function1)|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///scala/util/Either$RightProjection/toOption()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///spire/math/Rational$/apply(int)|",
      "|java+method:///axle/game/GameIO/displayerFor(java.lang.Object,axle.game.Player)|",
      "|java+method:///scala/Option/get()|",
      "|java+method:///axle/game/Strategies$$anonfun$interactiveMove$1/apply(java.lang.Object,java.lang.Object)|"
    ],
    "v2Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///axle/package$/orderRational()|",
      "|java+method:///axle/game/Strategies$/userInputStream(scala.Function1,scala.Function0)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/util/Either/right()|",
      "|java+method:///axle/game/Game/moverM(java.lang.Object,java.lang.Object)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,cats.kernel.Order,spire.random.Dist)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$interactiveMove$1$$anonfun$5/Strategies$$anonfun$interactiveMove$1$$anonfun$5(axle.game.Strategies$$anonfun$interactiveMove$1,scala.Function1,java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/collection/immutable/Stream/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$interactiveMove$1$$anonfun$4/Strategies$$anonfun$interactiveMove$1$$anonfun$4(axle.game.Strategies$$anonfun$interactiveMove$1)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$interactiveMove$1$$anonfun$apply$3/Strategies$$anonfun$interactiveMove$1$$anonfun$apply$3(axle.game.Strategies$$anonfun$interactiveMove$1)|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///scala/collection/immutable/Stream$/canBuildFrom()|",
      "|java+method:///scala/collection/immutable/Stream/find(scala.Function1)|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///scala/util/Either$RightProjection/toOption()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///spire/math/Rational$/apply(int)|",
      "|java+method:///axle/game/GameIO/displayerFor(java.lang.Object,axle.game.Player)|",
      "|java+method:///scala/Option/get()|",
      "|java+method:///axle/game/Strategies$$anonfun$interactiveMove$1/apply(java.lang.Object,java.lang.Object)|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/game/Strategies$$anonfun$randomMove$1/apply(java.lang.Object,java.lang.Object)|",
    "called": "|java+method:///spire/math/Rational$/apply(long,long)|",
    "v1Body": [
      "|java+method:///axle/game/Strategies$$anonfun$randomMove$1/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/collection/Seq/toList()|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,spire.algebra.Order,spire.random.Dist)|",
      "|java+constructor:///axle/game/Strategies$$anonfun$randomMove$1$$anonfun$apply$4/Strategies$$anonfun$randomMove$1$$anonfun$apply$4(axle.game.Strategies$$anonfun$randomMove$1,spire.math.Rational)|",
      "|java+method:///scala/collection/TraversableOnce/toMap(scala.Predef$$less$colon$less)|",
      "|java+method:///scala/Predef$/$conforms()|",
      "|java+method:///scala/collection/immutable/List/length()|",
      "|java+method:///axle/game/Game/moves(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/collection/immutable/List/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///spire/math/Rational$/apply(long,long)|",
      "|java+method:///scala/collection/immutable/List$/canBuildFrom()|"
    ],
    "v2Body": [
      "|java+method:///axle/game/Strategies$$anonfun$randomMove$1/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/package$/orderRational()|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/collection/Seq/toList()|",
      "|java+constructor:///axle/game/Strategies$$anonfun$randomMove$1$$anonfun$apply$4/Strategies$$anonfun$randomMove$1$$anonfun$apply$4(axle.game.Strategies$$anonfun$randomMove$1,spire.math.Rational)|",
      "|java+method:///scala/collection/TraversableOnce/toMap(scala.Predef$$less$colon$less)|",
      "|java+method:///scala/Predef$/$conforms()|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,cats.kernel.Order,spire.random.Dist)|",
      "|java+method:///scala/collection/immutable/List/length()|",
      "|java+method:///axle/game/Game/moves(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/collection/immutable/List/map(scala.Function1,scala.collection.generic.CanBuildFrom)|",
      "|java+method:///spire/math/Rational$/apply(long,long)|",
      "|java+method:///scala/collection/immutable/List$/canBuildFrom()|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/game/Strategies$$anonfun$hardCodedStringStrategy$1/apply(java.lang.Object,java.lang.Object)|",
    "called": "|java+method:///spire/math/Rational$/apply(int)|",
    "v1Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///axle/game/GameIO/parseMove(java.lang.Object,java.lang.String)|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/util/Either/right()|",
      "|java+method:///axle/game/Game/isValid(java.lang.Object,java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/game/Strategies$$anonfun$hardCodedStringStrategy$1/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///scala/util/Either$RightProjection/toOption()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,spire.algebra.Order,spire.random.Dist)|",
      "|java+method:///scala/Function2/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/math/Rational$/apply(int)|",
      "|java+method:///scala/Option/get()|"
    ],
    "v2Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///axle/game/GameIO/parseMove(java.lang.Object,java.lang.String)|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/package$/orderRational()|",
      "|java+method:///axle/stats/ConditionalProbabilityTable0$/apply$default$2()|",
      "|java+method:///scala/Function2/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/util/Either/right()|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,cats.kernel.Order,spire.random.Dist)|",
      "|java+method:///axle/game/Game/isValid(java.lang.Object,java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/game/Strategies$$anonfun$hardCodedStringStrategy$1/apply(java.lang.Object,java.lang.Object)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///scala/util/Either$RightProjection/toOption()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///axle/game/Strategies$/distDouble()|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///spire/math/Rational$/apply(int)|",
      "|java+method:///scala/Option/get()|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/stats/package$/binaryDecision(spire.math.Rational)|",
    "called": "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|",
    "v1Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/stats/package$/rationalProbabilityDist()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,spire.algebra.Order,spire.random.Dist)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/implicits$/literalIntAdditiveGroupOps(int)|",
      "|java+method:///scala/Predef$/genericWrapArray(java.lang.Object)|",
      "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|",
      "|java+method:///scala/StringContext/s(scala.collection.Seq)|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToBoolean(boolean)|",
      "|java+constructor:///scala/StringContext/StringContext(scala.collection.Seq)|"
    ],
    "v2Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/package$/orderRational()|",
      "|java+method:///axle/stats/package$/rationalProbabilityDist()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/implicits$/literalIntAdditiveGroupOps(int)|",
      "|java+method:///scala/Predef$/genericWrapArray(java.lang.Object)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,cats.kernel.Order,spire.random.Dist)|",
      "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|",
      "|java+method:///scala/StringContext/s(scala.collection.Seq)|",
      "|java+method:///scala/runtime/BoxesRunTime/boxToBoolean(boolean)|",
      "|java+constructor:///scala/StringContext/StringContext(scala.collection.Seq)|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/stats/package$/coin(spire.math.Rational)|",
    "called": "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|",
    "v1Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/stats/package$/rationalProbabilityDist()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,spire.algebra.Order,spire.random.Dist)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/implicits$/literalIntAdditiveGroupOps(int)|",
      "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|"
    ],
    "v2Body": [
      "|java+method:///scala/collection/immutable/Map$/apply(scala.collection.Seq)|",
      "|java+method:///scala/Predef$/Map()|",
      "|java+method:///spire/math/Rational$/RationalAlgebra()|",
      "|java+method:///axle/package$/orderRational()|",
      "|java+method:///axle/stats/package$/rationalProbabilityDist()|",
      "|java+method:///scala/Predef$/ArrowAssoc(java.lang.Object)|",
      "|java+method:///scala/Predef$/wrapRefArray(java.lang.Object%5B%5D)|",
      "|java+method:///scala/Predef$ArrowAssoc$/$minus$greater$extension(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/implicits$/literalIntAdditiveGroupOps(int)|",
      "|java+constructor:///axle/stats/ConditionalProbabilityTable0/ConditionalProbabilityTable0(scala.collection.immutable.Map,java.lang.String,spire.algebra.Field,cats.kernel.Order,spire.random.Dist)|",
      "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.axle-lang:axle-core_2.11:0.2.6",
    "coordinatesV2": "org.axle-lang:axle-core_2.11:0.2.7",
    "caller": "|java+method:///axle/algebra/GeoCoordinates$$anon$4/distance(axle.algebra.GeoCoordinates,axle.algebra.GeoCoordinates)|",
    "called": "|java+method:///spire/syntax/ModuleOps/$colon$times(int,spire.algebra.Module,spire.algebra.Ring)|",
    "v1Body": [
      "|java+method:///axle/package$/arcTangent2(java.lang.Object,java.lang.Object,spire.algebra.Trig,axle.quanta.AngleConverter)|",
      "|java+method:///axle/algebra/GeoCoordinates/latitude()|",
      "|java+method:///spire/algebra/Module/timesr(java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/algebra/GeoCoordinates/longitude()|",
      "|java+method:///axle/quanta/package$/modulize(spire.algebra.Field,axle.quanta.UnitConverter)|",
      "|java+method:///axle/algebra/GeoCoordinates$$anon$4/half()|",
      "|java+method:///spire/math/package$/sqrt(java.lang.Object,spire.algebra.NRoot)|",
      "|java+method:///spire/syntax/ModuleOps/$colon$times(int,spire.algebra.Module,spire.algebra.Ring)|",
      "|java+method:///spire/algebra/Field/plus(java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/package$/square(java.lang.Object,spire.algebra.Field)|",
      "|java+method:///axle/package$/sine(axle.quanta.UnittedQuantity,spire.algebra.MultiplicativeMonoid,spire.algebra.Eq,spire.algebra.Trig,axle.quanta.AngleConverter)|",
      "|java+method:///spire/algebra/Field/times(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/implicits$/moduleOps(java.lang.Object)|",
      "|java+method:///axle/package$/cosine(axle.quanta.UnittedQuantity,spire.algebra.MultiplicativeMonoid,spire.algebra.Eq,spire.algebra.Trig,axle.quanta.AngleConverter)|",
      "|java+method:///spire/implicits$/literalIntAdditiveGroupOps(int)|",
      "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|",
      "|java+method:///spire/algebra/Module/minus(java.lang.Object,java.lang.Object)|"
    ],
    "v2Body": [
      "|java+method:///axle/package$/arcTangent2(java.lang.Object,java.lang.Object,spire.algebra.Trig,axle.quanta.AngleConverter)|",
      "|java+method:///axle/algebra/GeoCoordinates/latitude()|",
      "|java+method:///spire/algebra/Module/timesr(java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/package$/cosine(axle.quanta.UnittedQuantity,spire.algebra.MultiplicativeMonoid,cats.kernel.Eq,spire.algebra.Trig,axle.quanta.AngleConverter)|",
      "|java+method:///axle/algebra/GeoCoordinates/longitude()|",
      "|java+method:///axle/quanta/package$/modulize(spire.algebra.Field,axle.quanta.UnitConverter)|",
      "|java+method:///axle/algebra/GeoCoordinates$$anon$4/half()|",
      "|java+method:///spire/math/package$/sqrt(java.lang.Object,spire.algebra.NRoot)|",
      "|java+method:///spire/implicits$/literalIntAdditiveGroupOps(int)|",
      "|java+method:///axle/package$/sine(axle.quanta.UnittedQuantity,spire.algebra.MultiplicativeMonoid,cats.kernel.Eq,spire.algebra.Trig,axle.quanta.AngleConverter)|",
      "|java+method:///spire/syntax/ModuleOps/$colon$times(int,spire.algebra.Module,spire.algebra.Ring)|",
      "|java+method:///spire/algebra/Field/plus(java.lang.Object,java.lang.Object)|",
      "|java+method:///axle/package$/square(java.lang.Object,spire.algebra.Field)|",
      "|java+method:///spire/algebra/Field/times(java.lang.Object,java.lang.Object)|",
      "|java+method:///spire/implicits$/moduleOps(java.lang.Object)|",
      "|java+method:///spire/syntax/LiteralIntAdditiveGroupOps$/$minus$extension(int,java.lang.Object,spire.algebra.Ring)|",
      "|java+method:///spire/algebra/Module/minus(java.lang.Object,java.lang.Object)|"
    ],
    "affectedLib": "org.spire-math:spire_2.11:0.13.0",
    "change": "UPDATED"
  }
]