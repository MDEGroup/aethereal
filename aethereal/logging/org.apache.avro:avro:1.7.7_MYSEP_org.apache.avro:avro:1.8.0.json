[
  {
    "coordinatesV1": "org.apache.avro:avro:1.8.0",
    "coordinatesV2": "org.apache.avro:avro:1.7.7",
    "caller": "|java+method:///org/apache/avro/Schema$Parser/parse(org.codehaus.jackson.JsonParser)|",
    "called": "|java+method:///org/codehaus/jackson/map/ObjectMapper/readTree(org.codehaus.jackson.JsonParser)|",
    "v1Body": [
      "|java+method:///java/lang/ThreadLocal/set(java.lang.Object)|",
      "|java+method:///java/lang/ThreadLocal/get()|",
      "|java+method:///org/apache/avro/Schema/parse(org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Names)|",
      "|java+method:///java/lang/Boolean/valueOf(boolean)|",
      "|java+method:///org/codehaus/jackson/map/ObjectMapper/readTree(org.codehaus.jackson.JsonParser)|",
      "|java+method:///org/apache/avro/Schema/access$1500()|",
      "|java+method:///org/apache/avro/Schema/access$1600()|",
      "|java+constructor:///org/apache/avro/SchemaParseException/SchemaParseException(java.lang.Throwable)|",
      "|java+method:///java/lang/Boolean/booleanValue()|"
    ],
    "v2Body": [
      "|java+method:///org/codehaus/jackson/JsonParser/close()|",
      "|java+method:///java/lang/ThreadLocal/set(java.lang.Object)|",
      "|java+method:///java/lang/ThreadLocal/get()|",
      "|java+method:///org/apache/avro/Schema/parse(org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Names)|",
      "|java+method:///java/lang/Boolean/valueOf(boolean)|",
      "|java+method:///org/codehaus/jackson/map/ObjectMapper/readTree(org.codehaus.jackson.JsonParser)|",
      "|java+method:///org/apache/avro/Schema/access$1500()|",
      "|java+method:///org/apache/avro/Schema/access$1600()|",
      "|java+constructor:///org/apache/avro/SchemaParseException/SchemaParseException(java.lang.Throwable)|",
      "|java+method:///java/lang/Boolean/booleanValue()|"
    ],
    "affectedLib": "org.codehaus.jackson:jackson-mapper-asl:1.7.1",
    "change": "REMOVED"
  },
  {
    "coordinatesV1": "org.apache.avro:avro:1.8.0",
    "coordinatesV2": "org.apache.avro:avro:1.7.7",
    "caller": "|java+method:///org/apache/avro/Schema/parse(org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Names)|",
    "called": "|java+constructor:///org/codehaus/jackson/node/DoubleNode/DoubleNode(double)|",
    "v1Body": [
      "|java+method:///org/apache/avro/Schema/getType()|",
      "|java+method:///java/lang/String/toUpperCase()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/avro/Schema/getOptionalText(org.codehaus.jackson.JsonNode,java.lang.String)|",
      "|java+method:///org/apache/avro/Schema/addAlias(java.lang.String)|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///org/apache/avro/Schema/addProp(java.lang.String,org.codehaus.jackson.JsonNode)|",
      "|java+method:///org/apache/avro/Schema$Field/access$1402(org.apache.avro.Schema$Field,java.util.Set)|",
      "|java+method:///org/codehaus/jackson/JsonNode/isTextual()|",
      "|java+method:///org/apache/avro/Schema$Names/space()|",
      "|java+method:///org/codehaus/jackson/JsonNode/isArray()|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+constructor:///org/apache/avro/Schema$ArraySchema/Schema$ArraySchema(org.apache.avro.Schema)|",
      "|java+method:///org/codehaus/jackson/JsonNode/size()|",
      "|java+constructor:///org/apache/avro/Schema$MapSchema/Schema$MapSchema(org.apache.avro.Schema)|",
      "|java+method:///org/codehaus/jackson/JsonNode/get(java.lang.String)|",
      "|java+constructor:///org/apache/avro/Schema$EnumSchema/Schema$EnumSchema(org.apache.avro.Schema$Name,java.lang.String,org.apache.avro.Schema$LockableArrayList)|",
      "|java+method:///org/apache/avro/Schema$Name/access$700(org.apache.avro.Schema$Name)|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+constructor:///org/apache/avro/SchemaParseException/SchemaParseException(java.lang.String)|",
      "|java+method:///org/codehaus/jackson/JsonNode/getIntValue()|",
      "|java+constructor:///org/apache/avro/Schema$LockableArrayList/Schema$LockableArrayList()|",
      "|java+method:///org/codehaus/jackson/JsonNode/isObject()|",
      "|java+method:///org/apache/avro/Schema/getRequiredText(org.codehaus.jackson.JsonNode,java.lang.String,java.lang.String)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///org/apache/avro/Schema$Field/addProp(java.lang.String,org.codehaus.jackson.JsonNode)|",
      "|java+method:///org/apache/avro/Schema$LockableArrayList/add(java.lang.Object)|",
      "|java+constructor:///org/codehaus/jackson/node/DoubleNode/DoubleNode(double)|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///org/apache/avro/Schema/setFields(java.util.List)|",
      "|java+method:///org/apache/avro/Schema/create(org.apache.avro.Schema$Type)|",
      "|java+method:///java/lang/Double/doubleValue()|",
      "|java+method:///org/codehaus/jackson/JsonNode/iterator()|",
      "|java+method:///org/codehaus/jackson/JsonNode/getTextValue()|",
      "|java+method:///org/apache/avro/Schema$Names/add(org.apache.avro.Schema)|",
      "|java+method:///java/lang/String/equals(java.lang.Object)|",
      "|java+constructor:///org/apache/avro/Schema$RecordSchema/Schema$RecordSchema(org.apache.avro.Schema$Name,java.lang.String,boolean)|",
      "|java+constructor:///org/apache/avro/Schema$Field/Schema$Field(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)|",
      "|java+method:///org/apache/avro/Schema/parseAliases(org.codehaus.jackson.JsonNode)|",
      "|java+method:///java/lang/Double/valueOf(java.lang.String)|",
      "|java+method:///java/util/Set/contains(java.lang.Object)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/avro/Schema/parse(org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Names)|",
      "|java+method:///org/apache/avro/Schema$Field$Order/valueOf(java.lang.String)|",
      "|java+constructor:///org/apache/avro/Schema$UnionSchema/Schema$UnionSchema(org.apache.avro.Schema$LockableArrayList)|",
      "|java+method:///java/util/Map/containsKey(java.lang.Object)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///org/codehaus/jackson/JsonNode/getFieldNames()|",
      "|java+method:///org/codehaus/jackson/JsonNode/isInt()|",
      "|java+method:///org/apache/avro/Schema$Names/space(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///org/apache/avro/Schema$Names/get(java.lang.Object)|",
      "|java+constructor:///org/apache/avro/Schema$LockableArrayList/Schema$LockableArrayList(int)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///org/apache/avro/Schema$Name/Schema$Name(java.lang.String,java.lang.String)|",
      "|java+method:///org/apache/avro/Schema$Type/equals(java.lang.Object)|",
      "|java+constructor:///org/apache/avro/Schema$FixedSchema/Schema$FixedSchema(org.apache.avro.Schema$Name,java.lang.String,int)|"
    ],
    "v2Body": [
      "|java+method:///org/apache/avro/Schema/getType()|",
      "|java+method:///java/lang/String/toUpperCase()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/avro/Schema/getOptionalText(org.codehaus.jackson.JsonNode,java.lang.String)|",
      "|java+method:///org/apache/avro/Schema/addAlias(java.lang.String)|",
      "|java+method:///org/apache/avro/Schema/addProp(java.lang.String,org.codehaus.jackson.JsonNode)|",
      "|java+method:///org/apache/avro/Schema$Field/access$1402(org.apache.avro.Schema$Field,java.util.Set)|",
      "|java+method:///org/codehaus/jackson/JsonNode/isTextual()|",
      "|java+method:///org/apache/avro/Schema$Names/space()|",
      "|java+method:///org/codehaus/jackson/JsonNode/isArray()|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+constructor:///org/apache/avro/Schema$ArraySchema/Schema$ArraySchema(org.apache.avro.Schema)|",
      "|java+method:///org/codehaus/jackson/JsonNode/size()|",
      "|java+constructor:///org/apache/avro/Schema$MapSchema/Schema$MapSchema(org.apache.avro.Schema)|",
      "|java+method:///org/codehaus/jackson/JsonNode/get(java.lang.String)|",
      "|java+constructor:///org/apache/avro/Schema$EnumSchema/Schema$EnumSchema(org.apache.avro.Schema$Name,java.lang.String,org.apache.avro.Schema$LockableArrayList)|",
      "|java+method:///org/apache/avro/Schema$Name/access$700(org.apache.avro.Schema$Name)|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+constructor:///org/apache/avro/SchemaParseException/SchemaParseException(java.lang.String)|",
      "|java+method:///org/codehaus/jackson/JsonNode/getIntValue()|",
      "|java+constructor:///org/apache/avro/Schema$LockableArrayList/Schema$LockableArrayList()|",
      "|java+method:///org/codehaus/jackson/JsonNode/isObject()|",
      "|java+method:///org/apache/avro/Schema/getRequiredText(org.codehaus.jackson.JsonNode,java.lang.String,java.lang.String)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///org/apache/avro/Schema$Field/addProp(java.lang.String,org.codehaus.jackson.JsonNode)|",
      "|java+method:///org/apache/avro/Schema$LockableArrayList/add(java.lang.Object)|",
      "|java+constructor:///org/codehaus/jackson/node/DoubleNode/DoubleNode(double)|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///org/apache/avro/Schema/setFields(java.util.List)|",
      "|java+method:///org/apache/avro/Schema/create(org.apache.avro.Schema$Type)|",
      "|java+method:///java/lang/Double/doubleValue()|",
      "|java+method:///org/codehaus/jackson/JsonNode/iterator()|",
      "|java+method:///org/codehaus/jackson/JsonNode/getTextValue()|",
      "|java+method:///org/apache/avro/Schema$Names/add(org.apache.avro.Schema)|",
      "|java+method:///java/lang/String/equals(java.lang.Object)|",
      "|java+constructor:///org/apache/avro/Schema$RecordSchema/Schema$RecordSchema(org.apache.avro.Schema$Name,java.lang.String,boolean)|",
      "|java+constructor:///org/apache/avro/Schema$Field/Schema$Field(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)|",
      "|java+method:///org/apache/avro/Schema/parseAliases(org.codehaus.jackson.JsonNode)|",
      "|java+method:///java/lang/Double/valueOf(java.lang.String)|",
      "|java+method:///java/util/Set/contains(java.lang.Object)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/avro/Schema/parse(org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Names)|",
      "|java+method:///org/apache/avro/LogicalTypes/fromSchemaIgnoreInvalid(org.apache.avro.Schema)|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///org/apache/avro/Schema$Field$Order/valueOf(java.lang.String)|",
      "|java+constructor:///org/apache/avro/Schema$UnionSchema/Schema$UnionSchema(org.apache.avro.Schema$LockableArrayList)|",
      "|java+method:///java/util/Map/containsKey(java.lang.Object)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///org/codehaus/jackson/JsonNode/getFieldNames()|",
      "|java+method:///org/codehaus/jackson/JsonNode/isInt()|",
      "|java+method:///org/apache/avro/Schema$Names/space(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///org/apache/avro/Schema$Names/get(java.lang.Object)|",
      "|java+constructor:///org/apache/avro/Schema$LockableArrayList/Schema$LockableArrayList(int)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///org/apache/avro/Schema$Name/Schema$Name(java.lang.String,java.lang.String)|",
      "|java+method:///org/apache/avro/Schema$Type/equals(java.lang.Object)|",
      "|java+constructor:///org/apache/avro/Schema$FixedSchema/Schema$FixedSchema(org.apache.avro.Schema$Name,java.lang.String,int)|"
    ],
    "affectedLib": "org.codehaus.jackson:jackson-mapper-asl:1.7.1",
    "change": "REMOVED"
  }
]