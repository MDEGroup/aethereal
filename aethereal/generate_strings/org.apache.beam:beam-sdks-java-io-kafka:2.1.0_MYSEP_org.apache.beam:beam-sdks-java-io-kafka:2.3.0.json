[
  {
    "coordinatesV1": "org.apache.beam:beam-sdks-java-io-kafka:2.1.0",
    "coordinatesV2": "org.apache.beam:beam-sdks-java-io-kafka:2.3.0",
    "caller": "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader/KafkaIO$UnboundedKafkaReader(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource,org.apache.beam.sdk.io.kafka.KafkaCheckpointMark)|",
    "called": "|java+method:///org/apache/kafka/common/TopicPartition/equals(java.lang.Object)|",
    "v1Body": [
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/collect/Lists/transform(java.util.List,org.apache.beam.sdks.java.io.kafka.repackaged.com.google.common.base.Function)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getNextOffset()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getPartition()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$700(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesRead()|",
      "|java+constructor:///org/apache/beam/sdk/io/UnboundedSource$UnboundedReader/UnboundedSource$UnboundedReader()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader$PartitionState/access$802(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaReader$PartitionState,long)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadScheduledExecutor()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark/getPartitions()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogElementsOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsRead()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogBytesOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/collect/ImmutableList/copyOf(java.util.Collection)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$600(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader$1/KafkaIO$UnboundedKafkaReader$1(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaReader)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getTopic()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+constructor:///java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean(boolean)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.Object)|",
      "|java+method:///org/apache/kafka/common/TopicPartition/equals(java.lang.Object)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadExecutor()|",
      "|java+constructor:///java/util/concurrent/SynchronousQueue/SynchronousQueue()|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///java/util/Collections/emptyIterator()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/ConsumerSpEL/ConsumerSpEL()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/String/valueOf(int)|"
    ],
    "v2Body": [
      "|java+method:///java/util/stream/Stream/map(java.util.function.Function)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getNextOffset()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getPartition()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$700(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesRead()|",
      "|java+constructor:///org/apache/beam/sdk/io/UnboundedSource$UnboundedReader/UnboundedSource$UnboundedReader()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader$PartitionState/access$802(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaReader$PartitionState,long)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadScheduledExecutor()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark/getPartitions()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogElementsOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogBytesOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/collect/ImmutableList/copyOf(java.util.Collection)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$600(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///java/util/stream/Stream/collect(java.util.stream.Collector)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///java/util/concurrent/atomic/AtomicReference/AtomicReference()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getTopic()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+constructor:///java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean(boolean)|",
      "|java+method:///java/util/stream/Collectors/toList()|",
      "|java+method:///java/util/List/stream()|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.Object)|",
      "|java+method:///org/apache/kafka/common/TopicPartition/equals(java.lang.Object)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadExecutor()|",
      "|java+constructor:///java/util/concurrent/SynchronousQueue/SynchronousQueue()|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsRead()|",
      "|java+method:///org/apache/beam/sdk/metrics/Metrics/counter(java.lang.String,java.lang.String)|",
      "|java+method:///java/util/Collections/emptyIterator()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/ConsumerSpEL/ConsumerSpEL()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/String/valueOf(int)|"
    ],
    "affectedLib": "org.apache.kafka:kafka-clients:1.0.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.beam:beam-sdks-java-io-kafka:2.1.0",
    "coordinatesV2": "org.apache.beam:beam-sdks-java-io-kafka:2.3.0",
    "caller": "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/split(int,org.apache.beam.sdk.options.PipelineOptions)|",
    "called": "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
    "v1Body": [
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Joiner/join(java.lang.Iterable)|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+constructor:///java/util/ArrayList/ArrayList(int)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setTopicPartitions(java.util.List)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getConsumerConfig()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/access$400()|",
      "|java+method:///org/apache/beam/sdk/transforms/SerializableFunction/apply(java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopics()|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkArgument(boolean)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///org/apache/kafka/common/PartitionInfo/partition()|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///org/apache/kafka/clients/consumer/Consumer/close()|",
      "|java+method:///java/lang/Throwable/addSuppressed(java.lang.Throwable)|",
      "|java+method:///java/util/Collections/emptyList()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setTopics(java.util.List)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/toBuilder()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getConsumerFactoryFn()|",
      "|java+method:///org/apache/kafka/clients/consumer/Consumer/partitionsFor(java.lang.String)|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource$1/KafkaIO$UnboundedKafkaSource$1(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///org/apache/kafka/common/PartitionInfo/topic()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///java/util/Collections/sort(java.util.List,java.util.Comparator)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/build()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/KafkaIO$UnboundedKafkaSource(org.apache.beam.sdk.io.kafka.KafkaIO$Read,int)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Joiner/on(java.lang.String)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///java/lang/Math/min(int,int)|"
    ],
    "v2Body": [
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Joiner/join(java.lang.Iterable)|",
      "|java+constructor:///java/util/ArrayList/ArrayList()|",
      "|java+constructor:///java/util/ArrayList/ArrayList(int)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setTopicPartitions(java.util.List)|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///java/util/List/sort(java.util.Comparator)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getConsumerConfig()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/access$400()|",
      "|java+method:///org/apache/beam/sdk/transforms/SerializableFunction/apply(java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopics()|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkArgument(boolean)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///org/apache/kafka/common/PartitionInfo/partition()|",
      "|java+method:///java/util/List/isEmpty()|",
      "|java+method:///org/apache/kafka/clients/consumer/Consumer/close()|",
      "|java+method:///java/lang/Throwable/addSuppressed(java.lang.Throwable)|",
      "|java+method:///java/util/Collections/emptyList()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setTopics(java.util.List)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/toBuilder()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getConsumerFactoryFn()|",
      "|java+method:///org/apache/kafka/clients/consumer/Consumer/partitionsFor(java.lang.String)|",
      "|java+method:///org/apache/kafka/common/PartitionInfo/topic()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/build()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/KafkaIO$UnboundedKafkaSource(org.apache.beam.sdk.io.kafka.KafkaIO$Read,int)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Joiner/on(java.lang.String)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///java/lang/Math/min(int,int)|"
    ],
    "affectedLib": "org.apache.kafka:kafka-clients:1.0.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.beam:beam-sdks-java-io-kafka:2.1.0",
    "coordinatesV2": "org.apache.beam:beam-sdks-java-io-kafka:2.3.0",
    "caller": "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader/consumerPollLoop()|",
    "called": "|java+method:///org/apache/kafka/clients/consumer/ConsumerRecords/isEmpty()|",
    "v1Body": [
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/access$400()|",
      "|java+method:///java/util/concurrent/atomic/AtomicBoolean/get()|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object)|",
      "|java+method:///org/joda/time/Duration/getMillis()|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/kafka/clients/consumer/Consumer/poll(long)|",
      "|java+method:///java/util/concurrent/SynchronousQueue/put(java.lang.Object)|",
      "|java+method:///org/apache/kafka/clients/consumer/ConsumerRecords/isEmpty()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/access$400()|",
      "|java+method:///org/apache/kafka/clients/consumer/ConsumerRecords/isEmpty()|",
      "|java+method:///java/util/concurrent/SynchronousQueue/offer(java.lang.Object,long,java.util.concurrent.TimeUnit)|",
      "|java+method:///java/util/concurrent/atomic/AtomicReference/getAndSet(java.lang.Object)|",
      "|java+method:///org/apache/kafka/clients/consumer/ConsumerRecords/empty()|",
      "|java+method:///java/util/concurrent/atomic/AtomicBoolean/get()|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object)|",
      "|java+method:///org/joda/time/Duration/getMillis()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader/commitCheckpointMark(org.apache.beam.sdk.io.kafka.KafkaCheckpointMark)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/kafka/clients/consumer/Consumer/poll(long)|"
    ],
    "affectedLib": "org.apache.kafka:kafka-clients:1.0.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.beam:beam-sdks-java-io-kafka:2.1.0",
    "coordinatesV2": "org.apache.beam:beam-sdks-java-io-kafka:2.3.0",
    "caller": "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader/KafkaIO$UnboundedKafkaReader(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource,org.apache.beam.sdk.io.kafka.KafkaCheckpointMark)|",
    "called": "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsReadBySplit(java.lang.String)|",
    "v1Body": [
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/collect/Lists/transform(java.util.List,org.apache.beam.sdks.java.io.kafka.repackaged.com.google.common.base.Function)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getNextOffset()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getPartition()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$700(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesRead()|",
      "|java+constructor:///org/apache/beam/sdk/io/UnboundedSource$UnboundedReader/UnboundedSource$UnboundedReader()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader$PartitionState/access$802(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaReader$PartitionState,long)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadScheduledExecutor()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark/getPartitions()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogElementsOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsRead()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogBytesOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/collect/ImmutableList/copyOf(java.util.Collection)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$600(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader$1/KafkaIO$UnboundedKafkaReader$1(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaReader)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getTopic()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+constructor:///java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean(boolean)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.Object)|",
      "|java+method:///org/apache/kafka/common/TopicPartition/equals(java.lang.Object)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadExecutor()|",
      "|java+constructor:///java/util/concurrent/SynchronousQueue/SynchronousQueue()|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///java/util/Collections/emptyIterator()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/ConsumerSpEL/ConsumerSpEL()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/String/valueOf(int)|"
    ],
    "v2Body": [
      "|java+method:///java/util/stream/Stream/map(java.util.function.Function)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getNextOffset()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getPartition()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$700(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesRead()|",
      "|java+constructor:///org/apache/beam/sdk/io/UnboundedSource$UnboundedReader/UnboundedSource$UnboundedReader()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaReader$PartitionState/access$802(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaReader$PartitionState,long)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadScheduledExecutor()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark/getPartitions()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogElementsOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/backlogBytesOfSplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///org/apache/kafka/common/TopicPartition/TopicPartition(java.lang.String,int)|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/collect/ImmutableList/copyOf(java.util.Collection)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$UnboundedKafkaSource/access$600(org.apache.beam.sdk.io.kafka.KafkaIO$UnboundedKafkaSource)|",
      "|java+method:///java/util/stream/Stream/collect(java.util.stream.Collector)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///java/util/concurrent/atomic/AtomicReference/AtomicReference()|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/bytesReadBySplit(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaCheckpointMark$PartitionMark/getTopic()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+constructor:///java/util/concurrent/atomic/AtomicBoolean/AtomicBoolean(boolean)|",
      "|java+method:///java/util/stream/Collectors/toList()|",
      "|java+method:///java/util/List/stream()|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkState(boolean,java.lang.Object)|",
      "|java+method:///org/apache/kafka/common/TopicPartition/equals(java.lang.Object)|",
      "|java+method:///java/util/concurrent/Executors/newSingleThreadExecutor()|",
      "|java+constructor:///java/util/concurrent/SynchronousQueue/SynchronousQueue()|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///org/apache/beam/sdk/metrics/SourceMetrics/elementsRead()|",
      "|java+method:///org/apache/beam/sdk/metrics/Metrics/counter(java.lang.String,java.lang.String)|",
      "|java+method:///java/util/Collections/emptyIterator()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/ConsumerSpEL/ConsumerSpEL()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///java/lang/String/valueOf(int)|"
    ],
    "affectedLib": "org.apache.beam:beam-sdks-java-core:2.3.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.beam:beam-sdks-java-io-kafka:2.1.0",
    "coordinatesV2": "org.apache.beam:beam-sdks-java-io-kafka:2.3.0",
    "caller": "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Write/expand(org.apache.beam.sdk.values.PCollection)|",
    "called": "|java+method:///org/apache/beam/sdk/values/PCollection/apply(org.apache.beam.sdk.transforms.PTransform)|",
    "v1Body": [
      "|java+method:///org/apache/beam/sdk/values/PCollection/getPipeline()|",
      "|java+method:///org/apache/beam/sdk/values/PCollection/apply(org.apache.beam.sdk.transforms.PTransform)|",
      "|java+method:///org/apache/beam/sdk/transforms/ParDo/of(org.apache.beam.sdk.transforms.DoFn)|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$KafkaWriter/KafkaIO$KafkaWriter(org.apache.beam.sdk.io.kafka.KafkaIO$Write)|",
      "|java+method:///org/apache/beam/sdk/values/PDone/in(org.apache.beam.sdk.Pipeline)|"
    ],
    "v2Body": [
      "|java+method:///org/apache/beam/sdk/values/PCollection/getPipeline()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Write/getValueSerializer()|",
      "|java+method:///org/apache/beam/sdk/values/PCollection/apply(org.apache.beam.sdk.transforms.PTransform)|",
      "|java+method:///org/apache/beam/sdk/transforms/ParDo/of(org.apache.beam.sdk.transforms.DoFn)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Write/getTopic()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Write/getKeySerializer()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Write/isEOS()|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkArgument(boolean,java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Write/getProducerConfig()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$EOSWrite/KafkaIO$EOSWrite(org.apache.beam.sdk.io.kafka.KafkaIO$Write)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$EOSWrite/ensureEOSSupport()|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/KafkaIO$KafkaWriter/KafkaIO$KafkaWriter(org.apache.beam.sdk.io.kafka.KafkaIO$Write)|",
      "|java+method:///org/apache/beam/sdk/values/PDone/in(org.apache.beam.sdk.Pipeline)|"
    ],
    "affectedLib": "org.apache.beam:beam-sdks-java-core:2.3.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "org.apache.beam:beam-sdks-java-io-kafka:2.1.0",
    "coordinatesV2": "org.apache.beam:beam-sdks-java-io-kafka:2.3.0",
    "caller": "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/expand(org.apache.beam.sdk.values.PBegin)|",
    "called": "|java+method:///org/apache/beam/sdk/io/Read$Unbounded/withMaxReadTime(org.joda.time.Duration)|",
    "v1Body": [
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkNotNull(java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getKeyDeserializer()|",
      "|java+method:///org/apache/beam/sdk/Pipeline/apply(org.apache.beam.sdk.transforms.PTransform)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getKeyCoder()|",
      "|java+method:///org/apache/beam/sdk/values/PBegin/getPipeline()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/toBuilder()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/makeSource()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/build()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getValueCoder()|",
      "|java+method:///org/apache/beam/sdk/io/Read$Unbounded/withMaxReadTime(org.joda.time.Duration)|",
      "|java+method:///org/apache/beam/sdk/io/Read/from(org.apache.beam.sdk.io.UnboundedSource)|",
      "|java+method:///org/apache/beam/sdk/io/Read$Unbounded/withMaxNumRecords(long)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setKeyCoder(org.apache.beam.sdk.coders.Coder)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getMaxNumRecords()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/inferCoder(org.apache.beam.sdk.coders.CoderRegistry,java.lang.Class)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getValueDeserializer()|",
      "|java+method:///org/apache/beam/sdk/Pipeline/getCoderRegistry()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setValueCoder(org.apache.beam.sdk.coders.Coder)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getMaxReadTime()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/kafka/common/utils/AppInfoParser/getVersion()|",
      "|java+method:///java/lang/Boolean/equals(java.lang.Object)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getKeyDeserializer()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/isCommitOffsetsInFinalizeEnabled()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setKeyCoder(org.apache.beam.sdk.coders.Coder)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/makeSource()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/build()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getValueCoder()|",
      "|java+method:///org/apache/beam/sdk/io/Read$Unbounded/withMaxReadTime(org.joda.time.Duration)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getConsumerConfig()|",
      "|java+constructor:///org/apache/beam/sdk/io/kafka/ConsumerSpEL/ConsumerSpEL()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/access$400()|",
      "|java+method:///org/apache/beam/sdk/Pipeline/apply(org.apache.beam.sdk.transforms.PTransform)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopics()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getTopicPartitions()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getKeyCoder()|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/values/PBegin/getPipeline()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/toBuilder()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getMaxNumRecords()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO/inferCoder(org.apache.beam.sdk.coders.CoderRegistry,java.lang.Class)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getValueDeserializer()|",
      "|java+method:///org/apache/beam/sdk/Pipeline/getCoderRegistry()|",
      "|java+method:///org/apache/beam/sdk/io/BoundedReadFromUnboundedSource/withMaxNumRecords(long)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getStartReadTime()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read$Builder/setValueCoder(org.apache.beam.sdk.coders.Coder)|",
      "|java+method:///org/apache/beam/sdk/io/kafka/KafkaIO$Read/getMaxReadTime()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///org/apache/beam/sdk/io/kafka/ConsumerSpEL/hasOffsetsForTimes()|",
      "|java+method:///org/apache/beam/sdks/java/io/kafka/repackaged/com/google/common/base/Preconditions/checkArgument(boolean,java.lang.Object)|",
      "|java+method:///org/apache/beam/sdk/io/Read/from(org.apache.beam.sdk.io.UnboundedSource)|"
    ],
    "affectedLib": "org.apache.beam:beam-sdks-java-core:2.3.0",
    "change": "UPDATED"
  }
]