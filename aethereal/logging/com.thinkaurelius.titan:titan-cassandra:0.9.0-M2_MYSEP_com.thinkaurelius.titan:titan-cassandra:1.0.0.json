[
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/mutateMany(java.util.Map,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
    "called": "|java+constructor:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/DistributedStoreManager$MaskedTimestamp(com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
    "v1Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getDeletions()|",
      "|java+method:///org/apache/cassandra/db/RowMutation/add(java.lang.String,java.nio.ByteBuffer,java.nio.ByteBuffer,long)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///java/util/Map/size()|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getColumnAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasAdditions()|",
      "|java+method:///java/util/Map/entrySet()|",
      "|java+constructor:///org/apache/cassandra/db/RowMutation/RowMutation(java.lang.String,java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/sleepAfterWrite(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction,com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager$MaskedTimestamp)|",
      "|java+method:///org/apache/cassandra/db/RowMutation/delete(java.lang.String,java.nio.ByteBuffer,long)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getDeletionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+method:///java/util/Map/put(java.lang.Object,java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/mutate(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasDeletions()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/as(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getWriteConsistencyLevel()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getMetaData()|",
      "|java+method:///org/apache/cassandra/db/RowMutation/add(java.lang.String,java.nio.ByteBuffer,java.nio.ByteBuffer,long,int)|",
      "|java+method:///java/util/Map$Entry/getKey()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/DistributedStoreManager$MaskedTimestamp(com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///com/google/common/base/Preconditions/checkNotNull(java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getValueAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getAdditionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+constructor:///java/util/HashMap/HashMap(int)|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///java/util/Map$Entry/getValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getAdditions()|",
      "|java+method:///java/util/Collection/iterator()|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/sleepAfterWrite(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction,com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager$MaskedTimestamp)|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getMetaData()|",
      "|java+method:///org/apache/cassandra/db/Mutation/add(java.lang.String,org.apache.cassandra.db.composites.CellName,java.nio.ByteBuffer,long)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///java/util/Map/size()|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getColumnAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///org/apache/cassandra/db/Mutation/delete(java.lang.String,org.apache.cassandra.db.composites.CellName,long)|",
      "|java+method:///java/util/Map/entrySet()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getDeletionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+method:///java/util/Map/put(java.lang.Object,java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/mutate(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasDeletions()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/as(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getWriteConsistencyLevel()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///java/util/Map$Entry/getKey()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/DistributedStoreManager$MaskedTimestamp(com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///org/apache/cassandra/db/Mutation/add(java.lang.String,org.apache.cassandra.db.composites.CellName,java.nio.ByteBuffer,long,int)|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/simpleDense(java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getDeletions()|",
      "|java+method:///com/google/common/base/Preconditions/checkNotNull(java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getValueAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getAdditionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+constructor:///java/util/HashMap/HashMap(int)|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+constructor:///org/apache/cassandra/db/Mutation/Mutation(java.lang.String,java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasAdditions()|",
      "|java+method:///java/util/Map$Entry/getValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getAdditions()|",
      "|java+method:///java/util/Collection/iterator()|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/getMaximumToken()|",
    "called": "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/oneByteBuffer(int)|",
    "v1Body": [
      "|java+constructor:///org/apache/cassandra/dht/LongToken/LongToken(java.lang.Long)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/oneByteBuffer(int)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///java/lang/Long/valueOf(long)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/dht/BytesToken/BytesToken(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+constructor:///org/apache/cassandra/dht/BigIntegerToken/BigIntegerToken(java.math.BigInteger)|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/oneByteBuffer(int)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/dht/BytesToken/BytesToken(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///org/apache/cassandra/dht/LongToken/LongToken(long)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+constructor:///org/apache/cassandra/dht/BigIntegerToken/BigIntegerToken(java.math.BigInteger)|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/next()|",
    "called": "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(java.nio.ByteBuffer)|",
    "v1Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/next()|",
      "|java+method:///java/nio/ByteBuffer/duplicate()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/ensureOpen()|",
      "|java+constructor:///java/util/NoSuchElementException/NoSuchElementException()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/hasNext()|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/next()|",
      "|java+method:///java/nio/ByteBuffer/duplicate()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/db/DecoratedKey/getKey()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/ensureOpen()|",
      "|java+constructor:///java/util/NoSuchElementException/NoSuchElementException()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/hasNext()|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/transformRange(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)|",
    "called": "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(byte%5B%5D)|",
    "v1Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/length()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeyRange/KeyRange(com.thinkaurelius.titan.diskstorage.StaticBuffer,com.thinkaurelius.titan.diskstorage.StaticBuffer)|",
      "|java+method:///com/google/common/base/Preconditions/checkArgument(boolean,java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+constructor:///java/lang/UnsupportedOperationException/UnsupportedOperationException()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(byte%5B%5D)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/cassandra/dht/BytesToken/getTokenValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/length()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeyRange/KeyRange(com.thinkaurelius.titan.diskstorage.StaticBuffer,com.thinkaurelius.titan.diskstorage.StaticBuffer)|",
      "|java+method:///com/google/common/base/Preconditions/checkArgument(boolean,java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+constructor:///java/lang/UnsupportedOperationException/UnsupportedOperationException()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(byte%5B%5D)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/retryDummyRead(java.lang.String,java.lang.String)|",
    "called": "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
    "v1Body": [
      "|java+constructor:///org/apache/cassandra/db/filter/NamesQueryFilter/NamesQueryFilter(java.util.SortedSet)|",
      "|java+method:///org/apache/cassandra/service/StorageProxy/read(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///com/google/common/collect/ImmutableList/of(java.lang.Object)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/zeroByteBuffer(int)|",
      "|java+method:///java/lang/System/currentTimeMillis()|",
      "|java+constructor:///java/util/TreeSet/TreeSet()|",
      "|java+method:///java/util/SortedSet/add(java.lang.Object)|",
      "|java+constructor:///org/apache/cassandra/db/SliceByNamesReadCommand/SliceByNamesReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.NamesQueryFilter)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/Thread/sleep(long)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|"
    ],
    "v2Body": [
      "|java+constructor:///org/apache/cassandra/db/filter/NamesQueryFilter/NamesQueryFilter(java.util.SortedSet)|",
      "|java+method:///org/apache/cassandra/service/StorageProxy/read(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///java/util/TreeSet/TreeSet(java.util.Comparator)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/simpleDense(java.nio.ByteBuffer)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/zeroByteBuffer(int)|",
      "|java+method:///java/lang/System/currentTimeMillis()|",
      "|java+method:///java/util/SortedSet/add(java.lang.Object)|",
      "|java+constructor:///org/apache/cassandra/db/SliceByNamesReadCommand/SliceByNamesReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.NamesQueryFilter)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/Thread/sleep(long)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///com/google/common/collect/ImmutableList/of(java.lang.Object)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager$1/CassandraEmbeddedStoreManager$1(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedStoreManager)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/getSlice(com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
    "called": "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
    "v1Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/read(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore,long,com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore$1)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceEnd()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/hasLimit()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceStart()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getKey()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/isMarkedForDelete()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getReadConsistencyLevel()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/time/TimestampProvider/getTime()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/getSortedColumns()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+method:///com/google/common/collect/Iterables/filter(java.lang.Iterable,com.google.common.base.Predicate)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getLimit()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/makeEntryList(java.lang.Iterable,com.thinkaurelius.titan.diskstorage.util.StaticArrayEntry$GetColVal,com.thinkaurelius.titan.diskstorage.StaticBuffer,int)|",
      "|java+constructor:///org/apache/cassandra/db/filter/SliceQueryFilter/SliceQueryFilter(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,int)|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///java/time/Instant/toEpochMilli()|",
      "|java+constructor:///org/apache/cassandra/db/SliceFromReadCommand/SliceFromReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.SliceQueryFilter)|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/read(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore,long,com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore$1)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/hasLimit()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceStart()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getKey()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/isMarkedForDelete()|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getReadConsistencyLevel()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/time/TimestampProvider/getTime()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/getSortedColumns()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceEnd()|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/simpleDense(java.nio.ByteBuffer)|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+method:///com/google/common/collect/Iterables/filter(java.lang.Iterable,com.google.common.base.Predicate)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getLimit()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/makeEntryList(java.lang.Iterable,com.thinkaurelius.titan.diskstorage.util.StaticArrayEntry$GetColVal,com.thinkaurelius.titan.diskstorage.StaticBuffer,int)|",
      "|java+method:///java/time/Instant/toEpochMilli()|",
      "|java+constructor:///org/apache/cassandra/db/filter/SliceQueryFilter/SliceQueryFilter(org.apache.cassandra.db.composites.Composite,org.apache.cassandra.db.composites.Composite,boolean,int)|",
      "|java+constructor:///org/apache/cassandra/db/SliceFromReadCommand/SliceFromReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.SliceQueryFilter)|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/ensureColumnFamilyExists(java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType)|",
    "called": "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String,java.lang.Throwable)|",
    "v1Body": [
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String,java.lang.Throwable)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/caching(org.apache.cassandra.config.CFMetaData$Caching)|",
      "|java+method:///org/apache/cassandra/service/MigrationManager/announceNewColumnFamily(org.apache.cassandra.config.CFMetaData)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(java.lang.String,java.lang.Integer,java.util.Map)|",
      "|java+method:///java/util/Collections/emptyMap()|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(org.apache.cassandra.io.compress.ICompressor)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compressionParameters(org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/config/Schema/getCFMetaData(java.lang.String,java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/retryDummyRead(java.lang.String,java.lang.String)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///java/lang/String/startsWith(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/addDefaultIndexNames()|"
    ],
    "v2Body": [
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String,java.lang.Throwable)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.composites.CellNameType)|",
      "|java+method:///org/apache/cassandra/service/MigrationManager/announceNewColumnFamily(org.apache.cassandra.config.CFMetaData)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/caching(org.apache.cassandra.cache.CachingOptions)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/util/Collections/emptyMap()|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(org.apache.cassandra.io.compress.ICompressor)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compressionParameters(org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/config/Schema/getCFMetaData(java.lang.String,java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/retryDummyRead(java.lang.String,java.lang.String)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///java/lang/String/startsWith(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(java.lang.String,java.lang.Integer,java.util.Map)|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/fromAbstractType(org.apache.cassandra.db.marshal.AbstractType,boolean)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/addDefaultIndexNames()|"
    ],
    "affectedLib": "com.thinkaurelius.titan:titan-core:1.0.0",
    "change": "ADDED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/astyanax/AstyanaxStoreManager/getContextBuilder(com.thinkaurelius.titan.diskstorage.configuration.Configuration,int,java.lang.String)|",
    "called": "|java+constructor:///com/netflix/astyanax/AstyanaxContext$Builder/AstyanaxContext$Builder()|",
    "v1Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///java/time/Duration/toMillis()|",
      "|java+constructor:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/AstyanaxConfigurationImpl()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConns(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSocketTimeout(int)|",
      "|java+method:///java/lang/Boolean/booleanValue()|",
      "|java+method:///java/lang/Class/forName(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setTargetCassandraVersion(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/SSLConnectionContext/SSLConnectionContext(java.lang.String,java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/ConnectionPoolConfigurationImpl(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConnsPerHost(int)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Throwable)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxOperationsPerConnection(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryMaxDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getLocalDatacenter()|",
      "|java+method:///java/lang/Class/newInstance()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolType/valueOf(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolMonitor(com.netflix.astyanax.connectionpool.ConnectionPoolMonitor)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/CountingConnectionPoolMonitor/CountingConnectionPoolMonitor()|",
      "|java+method:///com/netflix/astyanax/connectionpool/NodeDiscoveryType/valueOf(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setDiscoveryType(com.netflix.astyanax.connectionpool.NodeDiscoveryType)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSeeds(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetrySuspendWindow(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getRetryBackoffStrategy()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setPort(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolConfiguration(com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withAstyanaxConfiguration(com.netflix.astyanax.AstyanaxConfiguration)|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.lang.Object%5B%5D,java.lang.String)|",
      "|java+method:///org/apache/commons/lang/StringUtils/isNotBlank(java.lang.String)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/has(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forCluster(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setLocalDatacenter(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/SimpleAuthenticationCredentials/SimpleAuthenticationCredentials(java.lang.String,java.lang.String)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withHostSupplier(com.google.common.base.Supplier)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setConnectionPoolType(com.netflix.astyanax.connectionpool.impl.ConnectionPoolType)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/astyanax/AstyanaxStoreManager/hasAuthentication()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/get(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forKeyspace(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setAuthenticationCredentials(com.netflix.astyanax.AuthenticationCredentials)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setConnectTimeout(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryBackoffStrategy(com.netflix.astyanax.connectionpool.RetryBackoffStrategy)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSSLConnectionContext(com.netflix.astyanax.connectionpool.SSLConnectionContext)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/netflix/astyanax/AstyanaxContext$Builder/AstyanaxContext$Builder()|"
    ],
    "v2Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///java/time/Duration/toMillis()|",
      "|java+constructor:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/AstyanaxConfigurationImpl()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConns(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSocketTimeout(int)|",
      "|java+method:///java/lang/Boolean/booleanValue()|",
      "|java+method:///java/lang/Class/forName(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setTargetCassandraVersion(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/SSLConnectionContext/SSLConnectionContext(java.lang.String,java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/ConnectionPoolConfigurationImpl(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConnsPerHost(int)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Throwable)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxOperationsPerConnection(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryMaxDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getLocalDatacenter()|",
      "|java+method:///java/lang/Class/newInstance()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolType/valueOf(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setMaxThriftSize(int)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolMonitor(com.netflix.astyanax.connectionpool.ConnectionPoolMonitor)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/CountingConnectionPoolMonitor/CountingConnectionPoolMonitor()|",
      "|java+method:///com/netflix/astyanax/connectionpool/NodeDiscoveryType/valueOf(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setDiscoveryType(com.netflix.astyanax.connectionpool.NodeDiscoveryType)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSeeds(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetrySuspendWindow(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getRetryBackoffStrategy()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setPort(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolConfiguration(com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withAstyanaxConfiguration(com.netflix.astyanax.AstyanaxConfiguration)|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.lang.Object%5B%5D,java.lang.String)|",
      "|java+method:///org/apache/commons/lang/StringUtils/isNotBlank(java.lang.String)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/has(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forCluster(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setLocalDatacenter(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/SimpleAuthenticationCredentials/SimpleAuthenticationCredentials(java.lang.String,java.lang.String)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withHostSupplier(com.google.common.base.Supplier)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setConnectionPoolType(com.netflix.astyanax.connectionpool.impl.ConnectionPoolType)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/astyanax/AstyanaxStoreManager/hasAuthentication()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/get(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forKeyspace(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setAuthenticationCredentials(com.netflix.astyanax.AuthenticationCredentials)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setConnectTimeout(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryBackoffStrategy(com.netflix.astyanax.connectionpool.RetryBackoffStrategy)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSSLConnectionContext(com.netflix.astyanax.connectionpool.SSLConnectionContext)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/netflix/astyanax/AstyanaxContext$Builder/AstyanaxContext$Builder()|"
    ],
    "affectedLib": "com.netflix.astyanax:astyanax-cassandra:3.8.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/astyanax/AstyanaxStoreManager/getContextBuilder(com.thinkaurelius.titan.diskstorage.configuration.Configuration,int,java.lang.String)|",
    "called": "|java+constructor:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/ConnectionPoolConfigurationImpl(java.lang.String)|",
    "v1Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///java/time/Duration/toMillis()|",
      "|java+constructor:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/AstyanaxConfigurationImpl()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConns(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSocketTimeout(int)|",
      "|java+method:///java/lang/Boolean/booleanValue()|",
      "|java+method:///java/lang/Class/forName(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setTargetCassandraVersion(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/SSLConnectionContext/SSLConnectionContext(java.lang.String,java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/ConnectionPoolConfigurationImpl(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConnsPerHost(int)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Throwable)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxOperationsPerConnection(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryMaxDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getLocalDatacenter()|",
      "|java+method:///java/lang/Class/newInstance()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolType/valueOf(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolMonitor(com.netflix.astyanax.connectionpool.ConnectionPoolMonitor)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/CountingConnectionPoolMonitor/CountingConnectionPoolMonitor()|",
      "|java+method:///com/netflix/astyanax/connectionpool/NodeDiscoveryType/valueOf(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setDiscoveryType(com.netflix.astyanax.connectionpool.NodeDiscoveryType)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSeeds(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetrySuspendWindow(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getRetryBackoffStrategy()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setPort(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolConfiguration(com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withAstyanaxConfiguration(com.netflix.astyanax.AstyanaxConfiguration)|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.lang.Object%5B%5D,java.lang.String)|",
      "|java+method:///org/apache/commons/lang/StringUtils/isNotBlank(java.lang.String)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/has(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forCluster(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setLocalDatacenter(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/SimpleAuthenticationCredentials/SimpleAuthenticationCredentials(java.lang.String,java.lang.String)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withHostSupplier(com.google.common.base.Supplier)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setConnectionPoolType(com.netflix.astyanax.connectionpool.impl.ConnectionPoolType)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/astyanax/AstyanaxStoreManager/hasAuthentication()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/get(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forKeyspace(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setAuthenticationCredentials(com.netflix.astyanax.AuthenticationCredentials)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setConnectTimeout(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryBackoffStrategy(com.netflix.astyanax.connectionpool.RetryBackoffStrategy)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSSLConnectionContext(com.netflix.astyanax.connectionpool.SSLConnectionContext)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/netflix/astyanax/AstyanaxContext$Builder/AstyanaxContext$Builder()|"
    ],
    "v2Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///java/time/Duration/toMillis()|",
      "|java+constructor:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/AstyanaxConfigurationImpl()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConns(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSocketTimeout(int)|",
      "|java+method:///java/lang/Boolean/booleanValue()|",
      "|java+method:///java/lang/Class/forName(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setTargetCassandraVersion(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/SSLConnectionContext/SSLConnectionContext(java.lang.String,java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/ConnectionPoolConfigurationImpl(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxConnsPerHost(int)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Throwable)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setMaxOperationsPerConnection(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryMaxDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getLocalDatacenter()|",
      "|java+method:///java/lang/Class/newInstance()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolType/valueOf(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setMaxThriftSize(int)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolMonitor(com.netflix.astyanax.connectionpool.ConnectionPoolMonitor)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/CountingConnectionPoolMonitor/CountingConnectionPoolMonitor()|",
      "|java+method:///com/netflix/astyanax/connectionpool/NodeDiscoveryType/valueOf(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setDiscoveryType(com.netflix.astyanax.connectionpool.NodeDiscoveryType)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSeeds(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetrySuspendWindow(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/getRetryBackoffStrategy()|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setPort(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryDelaySlice(int)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withConnectionPoolConfiguration(com.netflix.astyanax.connectionpool.ConnectionPoolConfiguration)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withAstyanaxConfiguration(com.netflix.astyanax.AstyanaxConfiguration)|",
      "|java+method:///org/apache/commons/lang/StringUtils/join(java.lang.Object%5B%5D,java.lang.String)|",
      "|java+method:///org/apache/commons/lang/StringUtils/isNotBlank(java.lang.String)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/has(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forCluster(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setLocalDatacenter(java.lang.String)|",
      "|java+constructor:///com/netflix/astyanax/connectionpool/impl/SimpleAuthenticationCredentials/SimpleAuthenticationCredentials(java.lang.String,java.lang.String)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/withHostSupplier(com.google.common.base.Supplier)|",
      "|java+method:///com/netflix/astyanax/impl/AstyanaxConfigurationImpl/setConnectionPoolType(com.netflix.astyanax.connectionpool.impl.ConnectionPoolType)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/astyanax/AstyanaxStoreManager/hasAuthentication()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/configuration/Configuration/get(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption,java.lang.String%5B%5D)|",
      "|java+method:///com/netflix/astyanax/AstyanaxContext$Builder/forKeyspace(java.lang.String)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setAuthenticationCredentials(com.netflix.astyanax.AuthenticationCredentials)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setConnectTimeout(int)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setRetryBackoffStrategy(com.netflix.astyanax.connectionpool.RetryBackoffStrategy)|",
      "|java+method:///com/netflix/astyanax/connectionpool/impl/ConnectionPoolConfigurationImpl/setSSLConnectionContext(com.netflix.astyanax.connectionpool.SSLConnectionContext)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/netflix/astyanax/AstyanaxContext$Builder/AstyanaxContext$Builder()|"
    ],
    "affectedLib": "com.netflix.astyanax:astyanax-core:3.8.0",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/mutateMany(java.util.Map,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
    "called": "|java+method:///org/apache/cassandra/db/Mutation/delete(java.lang.String,org.apache.cassandra.db.composites.CellName,long)|",
    "v1Body": [
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getDeletions()|",
      "|java+method:///org/apache/cassandra/db/RowMutation/add(java.lang.String,java.nio.ByteBuffer,java.nio.ByteBuffer,long)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///java/util/Map/size()|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getColumnAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasAdditions()|",
      "|java+method:///java/util/Map/entrySet()|",
      "|java+constructor:///org/apache/cassandra/db/RowMutation/RowMutation(java.lang.String,java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/sleepAfterWrite(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction,com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager$MaskedTimestamp)|",
      "|java+method:///org/apache/cassandra/db/RowMutation/delete(java.lang.String,java.nio.ByteBuffer,long)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getDeletionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+method:///java/util/Map/put(java.lang.Object,java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/mutate(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasDeletions()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/as(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getWriteConsistencyLevel()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getMetaData()|",
      "|java+method:///org/apache/cassandra/db/RowMutation/add(java.lang.String,java.nio.ByteBuffer,java.nio.ByteBuffer,long,int)|",
      "|java+method:///java/util/Map$Entry/getKey()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/DistributedStoreManager$MaskedTimestamp(com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///com/google/common/base/Preconditions/checkNotNull(java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getValueAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getAdditionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+constructor:///java/util/HashMap/HashMap(int)|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+method:///java/util/Map$Entry/getValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getAdditions()|",
      "|java+method:///java/util/Collection/iterator()|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/sleepAfterWrite(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction,com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager$MaskedTimestamp)|",
      "|java+method:///java/lang/Integer/intValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getMetaData()|",
      "|java+method:///org/apache/cassandra/db/Mutation/add(java.lang.String,org.apache.cassandra.db.composites.CellName,java.nio.ByteBuffer,long)|",
      "|java+method:///java/util/Map/get(java.lang.Object)|",
      "|java+method:///java/util/Map/size()|",
      "|java+method:///java/util/Map/values()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getColumnAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///org/apache/cassandra/db/Mutation/delete(java.lang.String,org.apache.cassandra.db.composites.CellName,long)|",
      "|java+method:///java/util/Map/entrySet()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getDeletionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+method:///java/util/Map/put(java.lang.Object,java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/mutate(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(java.util.Collection)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasDeletions()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/as(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getWriteConsistencyLevel()|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///java/util/Map$Entry/getKey()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/DistributedStoreManager$MaskedTimestamp(com.thinkaurelius.titan.diskstorage.common.DistributedStoreManager,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///org/apache/cassandra/db/Mutation/add(java.lang.String,org.apache.cassandra.db.composites.CellName,java.nio.ByteBuffer,long,int)|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/simpleDense(java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getDeletions()|",
      "|java+method:///com/google/common/base/Preconditions/checkNotNull(java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/Entry/getValueAs(com.thinkaurelius.titan.diskstorage.StaticBuffer$Factory)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/common/DistributedStoreManager$MaskedTimestamp/getAdditionTime(com.thinkaurelius.titan.diskstorage.util.time.TimestampProvider)|",
      "|java+constructor:///java/util/HashMap/HashMap(int)|",
      "|java+method:///java/util/Set/iterator()|",
      "|java+constructor:///org/apache/cassandra/db/Mutation/Mutation(java.lang.String,java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/hasAdditions()|",
      "|java+method:///java/util/Map$Entry/getValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///java/util/List/iterator()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KCVMutation/getAdditions()|",
      "|java+method:///java/util/Collection/iterator()|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/getMaximumToken()|",
    "called": "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|",
    "v1Body": [
      "|java+constructor:///org/apache/cassandra/dht/LongToken/LongToken(java.lang.Long)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/oneByteBuffer(int)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///java/lang/Long/valueOf(long)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/dht/BytesToken/BytesToken(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+constructor:///org/apache/cassandra/dht/BigIntegerToken/BigIntegerToken(java.math.BigInteger)|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/oneByteBuffer(int)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/dht/BytesToken/BytesToken(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///org/apache/cassandra/dht/LongToken/LongToken(long)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+constructor:///org/apache/cassandra/dht/BigIntegerToken/BigIntegerToken(java.math.BigInteger)|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/getSlice(com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
    "called": "|java+constructor:///org/apache/cassandra/db/SliceFromReadCommand/SliceFromReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.SliceQueryFilter)|",
    "v1Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/read(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore,long,com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore$1)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceEnd()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/hasLimit()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceStart()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getKey()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/isMarkedForDelete()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getReadConsistencyLevel()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/time/TimestampProvider/getTime()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/getSortedColumns()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+method:///com/google/common/collect/Iterables/filter(java.lang.Iterable,com.google.common.base.Predicate)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getLimit()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/makeEntryList(java.lang.Iterable,com.thinkaurelius.titan.diskstorage.util.StaticArrayEntry$GetColVal,com.thinkaurelius.titan.diskstorage.StaticBuffer,int)|",
      "|java+constructor:///org/apache/cassandra/db/filter/SliceQueryFilter/SliceQueryFilter(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,int)|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///java/time/Instant/toEpochMilli()|",
      "|java+constructor:///org/apache/cassandra/db/SliceFromReadCommand/SliceFromReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.SliceQueryFilter)|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/read(org.apache.cassandra.db.ReadCommand,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns/CassandraEmbeddedKeyColumnValueStore$FilterDeletedColumns(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore,long,com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore$1)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/hasLimit()|",
      "|java+method:///java/util/List/size()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceStart()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getKey()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/isMarkedForDelete()|",
      "|java+method:///java/util/List/get(int)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/asByteBuffer()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getReadConsistencyLevel()|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CLevel/getDB()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/time/TimestampProvider/getTime()|",
      "|java+method:///org/apache/cassandra/db/ColumnFamily/getSortedColumns()|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getSliceEnd()|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/simpleDense(java.nio.ByteBuffer)|",
      "|java+method:///java/lang/StringBuilder/append(int)|",
      "|java+method:///com/google/common/collect/Iterables/filter(java.lang.Iterable,com.google.common.base.Predicate)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery/getLimit()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/CassandraTransaction/getTx(com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/makeEntryList(java.lang.Iterable,com.thinkaurelius.titan.diskstorage.util.StaticArrayEntry$GetColVal,com.thinkaurelius.titan.diskstorage.StaticBuffer,int)|",
      "|java+method:///java/time/Instant/toEpochMilli()|",
      "|java+constructor:///org/apache/cassandra/db/filter/SliceQueryFilter/SliceQueryFilter(org.apache.cassandra.db.composites.Composite,org.apache.cassandra.db.composites.Composite,boolean,int)|",
      "|java+constructor:///org/apache/cassandra/db/SliceFromReadCommand/SliceFromReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.SliceQueryFilter)|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/hasNextInternal()|",
    "called": "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|",
    "v1Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/access$1000()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/getRowsIterator(java.util.List,java.nio.ByteBuffer)|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///java/nio/ByteBuffer/duplicate()|",
      "|java+method:///org/apache/cassandra/dht/IPartitioner/getToken(java.nio.ByteBuffer)|",
      "|java+method:///org/apache/cassandra/dht/Token/equals(java.lang.Object)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/access$300(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery,int,long)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/ensureOpen()|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|"
    ],
    "v2Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/access$1000()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/getRowsIterator(java.util.List,java.nio.ByteBuffer)|",
      "|java+method:///java/lang/Object/equals(java.lang.Object)|",
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///java/nio/ByteBuffer/duplicate()|",
      "|java+method:///org/apache/cassandra/dht/IPartitioner/getToken(java.nio.ByteBuffer)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore/access$300(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedKeyColumnValueStore,org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token,com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery,int,long)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedKeyColumnValueStore$RowIterator/ensureOpen()|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPartitioner()|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/transformRange(org.apache.cassandra.dht.Token,org.apache.cassandra.dht.Token)|",
    "called": "|java+method:///org/apache/cassandra/dht/BytesToken/getTokenValue()|",
    "v1Body": [
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/length()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeyRange/KeyRange(com.thinkaurelius.titan.diskstorage.StaticBuffer,com.thinkaurelius.titan.diskstorage.StaticBuffer)|",
      "|java+method:///com/google/common/base/Preconditions/checkArgument(boolean,java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+constructor:///java/lang/UnsupportedOperationException/UnsupportedOperationException()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(byte%5B%5D)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "v2Body": [
      "|java+method:///org/apache/cassandra/dht/BytesToken/getTokenValue()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/StaticBuffer/length()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeyRange/KeyRange(com.thinkaurelius.titan.diskstorage.StaticBuffer,com.thinkaurelius.titan.diskstorage.StaticBuffer)|",
      "|java+method:///com/google/common/base/Preconditions/checkArgument(boolean,java.lang.Object)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+constructor:///java/lang/UnsupportedOperationException/UnsupportedOperationException()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/StaticArrayBuffer/of(byte%5B%5D)|",
      "|java+constructor:///java/lang/AssertionError/AssertionError()|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/getLocalKeyPartition()|",
    "called": "|java+method:///org/apache/cassandra/service/StorageService/getPrimaryRanges(java.lang.String)|",
    "v1Body": [
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/ensureKeyspaceExists(java.lang.String)|",
      "|java+method:///java/util/Collection/size()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///java/util/Collection/iterator()|",
      "|java+method:///org/apache/cassandra/service/StorageService/getLocalPrimaryRanges(java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/transformRange(org.apache.cassandra.dht.Range)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(int)|"
    ],
    "v2Body": [
      "|java+method:///java/util/Iterator/hasNext()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/ensureKeyspaceExists(java.lang.String)|",
      "|java+method:///java/util/Collection/size()|",
      "|java+method:///java/util/Iterator/next()|",
      "|java+method:///org/apache/cassandra/service/StorageService/getPrimaryRanges(java.lang.String)|",
      "|java+method:///java/util/List/add(java.lang.Object)|",
      "|java+method:///java/util/Collection/iterator()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/utils/CassandraHelper/transformRange(org.apache.cassandra.dht.Range)|",
      "|java+constructor:///java/util/ArrayList/ArrayList(int)|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/ensureColumnFamilyExists(java.lang.String,java.lang.String,org.apache.cassandra.db.marshal.AbstractType)|",
    "called": "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.composites.CellNameType)|",
    "v1Body": [
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String,java.lang.Throwable)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/caching(org.apache.cassandra.config.CFMetaData$Caching)|",
      "|java+method:///org/apache/cassandra/service/MigrationManager/announceNewColumnFamily(org.apache.cassandra.config.CFMetaData)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.marshal.AbstractType,org.apache.cassandra.db.marshal.AbstractType)|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(java.lang.String,java.lang.Integer,java.util.Map)|",
      "|java+method:///java/util/Collections/emptyMap()|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(org.apache.cassandra.io.compress.ICompressor)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compressionParameters(org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/config/Schema/getCFMetaData(java.lang.String,java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/retryDummyRead(java.lang.String,java.lang.String)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///java/lang/String/startsWith(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/addDefaultIndexNames()|"
    ],
    "v2Body": [
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String,java.lang.Throwable)|",
      "|java+method:///org/slf4j/Logger/debug(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/config/CFMetaData/CFMetaData(java.lang.String,java.lang.String,org.apache.cassandra.db.ColumnFamilyType,org.apache.cassandra.db.composites.CellNameType)|",
      "|java+method:///org/apache/cassandra/service/MigrationManager/announceNewColumnFamily(org.apache.cassandra.config.CFMetaData)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/caching(org.apache.cassandra.cache.CachingOptions)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///java/util/Collections/emptyMap()|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(org.apache.cassandra.io.compress.ICompressor)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/compressionParameters(org.apache.cassandra.io.compress.CompressionParameters)|",
      "|java+method:///org/apache/cassandra/config/Schema/getCFMetaData(java.lang.String,java.lang.String)|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/retryDummyRead(java.lang.String,java.lang.String)|",
      "|java+method:///java/lang/Integer/valueOf(int)|",
      "|java+method:///java/lang/String/startsWith(java.lang.String)|",
      "|java+constructor:///org/apache/cassandra/io/compress/CompressionParameters/CompressionParameters(java.lang.String,java.lang.Integer,java.util.Map)|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/fromAbstractType(org.apache.cassandra.db.marshal.AbstractType,boolean)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|",
      "|java+method:///org/apache/cassandra/config/CFMetaData/addDefaultIndexNames()|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  },
  {
    "coordinatesV1": "com.thinkaurelius.titan:titan-cassandra:0.9.0-M2",
    "coordinatesV2": "com.thinkaurelius.titan:titan-cassandra:1.0.0",
    "caller": "|java+method:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager/retryDummyRead(java.lang.String,java.lang.String)|",
    "called": "|java+method:///org/apache/cassandra/service/StorageProxy/read(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
    "v1Body": [
      "|java+constructor:///org/apache/cassandra/db/filter/NamesQueryFilter/NamesQueryFilter(java.util.SortedSet)|",
      "|java+method:///org/apache/cassandra/service/StorageProxy/read(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+method:///com/google/common/collect/ImmutableList/of(java.lang.Object)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/zeroByteBuffer(int)|",
      "|java+method:///java/lang/System/currentTimeMillis()|",
      "|java+constructor:///java/util/TreeSet/TreeSet()|",
      "|java+method:///java/util/SortedSet/add(java.lang.Object)|",
      "|java+constructor:///org/apache/cassandra/db/SliceByNamesReadCommand/SliceByNamesReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.NamesQueryFilter)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/Thread/sleep(long)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|"
    ],
    "v2Body": [
      "|java+constructor:///org/apache/cassandra/db/filter/NamesQueryFilter/NamesQueryFilter(java.util.SortedSet)|",
      "|java+method:///org/apache/cassandra/service/StorageProxy/read(java.util.List,org.apache.cassandra.db.ConsistencyLevel)|",
      "|java+constructor:///java/util/TreeSet/TreeSet(java.util.Comparator)|",
      "|java+method:///java/lang/StringBuilder/append(java.lang.String)|",
      "|java+method:///org/apache/cassandra/db/composites/CellNames/simpleDense(java.nio.ByteBuffer)|",
      "|java+method:///org/slf4j/Logger/info(java.lang.String,java.lang.Object,java.lang.Object)|",
      "|java+constructor:///java/lang/StringBuilder/StringBuilder()|",
      "|java+method:///com/thinkaurelius/titan/diskstorage/util/ByteBufferUtil/zeroByteBuffer(int)|",
      "|java+method:///java/lang/System/currentTimeMillis()|",
      "|java+method:///java/util/SortedSet/add(java.lang.Object)|",
      "|java+constructor:///org/apache/cassandra/db/SliceByNamesReadCommand/SliceByNamesReadCommand(java.lang.String,java.nio.ByteBuffer,java.lang.String,long,org.apache.cassandra.db.filter.NamesQueryFilter)|",
      "|java+method:///org/slf4j/Logger/warn(java.lang.String,java.lang.Object%5B%5D)|",
      "|java+method:///java/lang/Thread/sleep(long)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.String)|",
      "|java+method:///com/google/common/collect/ImmutableList/of(java.lang.Object)|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/cassandra/embedded/CassandraEmbeddedStoreManager$1/CassandraEmbeddedStoreManager$1(com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedStoreManager)|",
      "|java+method:///java/lang/StringBuilder/toString()|",
      "|java+constructor:///com/thinkaurelius/titan/diskstorage/PermanentBackendException/PermanentBackendException(java.lang.Throwable)|"
    ],
    "affectedLib": "org.apache.cassandra:cassandra-all:2.1.9",
    "change": "UPDATED"
  }
]